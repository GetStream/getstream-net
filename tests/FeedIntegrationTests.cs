// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.
using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using Moq;
using GetStream.Requests;
using GetStream.Models;
using System.Threading;
using NUnit.Framework;

namespace GetStream.Tests
{
    [TestFixture]
    public class FeedClientTests
    {
        private readonly Mock<IClient> _mockClient;
        private readonly FeedClient _client;

        public FeedClientTests()
        {
            _mockClient = new Mock<IClient>();
            _client = new FeedClient(_mockClient.Object);
        }
        [Test]
        public async Task GetAppAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;

            var expectedResponse = new StreamResponse<GetApplicationResponse>
            {
                Data = new GetApplicationResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, GetApplicationResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.GetAppAsync(null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, GetApplicationResponse>(
                "GET",
                "/api/v2/app",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UpdateAppAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateAppRequest();

            var expectedResponse = new StreamResponse<Response>
            {
                Data = new Response()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<UpdateAppRequest, Response>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateAppRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UpdateAppAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<UpdateAppRequest, Response>(
                "PATCH",
                "/api/v2/app",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateAppRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task ListBlockListsAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;

            var expectedResponse = new StreamResponse<ListBlockListResponse>
            {
                Data = new ListBlockListResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, ListBlockListResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.ListBlockListsAsync(null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, ListBlockListResponse>(
                "GET",
                "/api/v2/blocklists",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task CreateBlockListAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new CreateBlockListRequest();

            var expectedResponse = new StreamResponse<CreateBlockListResponse>
            {
                Data = new CreateBlockListResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<CreateBlockListRequest, CreateBlockListResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CreateBlockListRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.CreateBlockListAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<CreateBlockListRequest, CreateBlockListResponse>(
                "POST",
                "/api/v2/blocklists",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CreateBlockListRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task DeleteBlockListAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var Name = "test-Name";

            var expectedResponse = new StreamResponse<Response>
            {
                Data = new Response()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, Response>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.DeleteBlockListAsync(Name,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, Response>(
                "DELETE",
                "/api/v2/blocklists/{name}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task GetBlockListAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var Name = "test-Name";

            var expectedResponse = new StreamResponse<GetBlockListResponse>
            {
                Data = new GetBlockListResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, GetBlockListResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.GetBlockListAsync(Name,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, GetBlockListResponse>(
                "GET",
                "/api/v2/blocklists/{name}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UpdateBlockListAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateBlockListRequest();
            var Name = "test-Name";

            var expectedResponse = new StreamResponse<UpdateBlockListResponse>
            {
                Data = new UpdateBlockListResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<UpdateBlockListRequest, UpdateBlockListResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateBlockListRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UpdateBlockListAsync(Name,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<UpdateBlockListRequest, UpdateBlockListResponse>(
                "PUT",
                "/api/v2/blocklists/{name}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateBlockListRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task CheckPushAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new CheckPushRequest();

            var expectedResponse = new StreamResponse<CheckPushResponse>
            {
                Data = new CheckPushResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<CheckPushRequest, CheckPushResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CheckPushRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.CheckPushAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<CheckPushRequest, CheckPushResponse>(
                "POST",
                "/api/v2/check_push",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CheckPushRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task CheckSNSAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new CheckSNSRequest();

            var expectedResponse = new StreamResponse<CheckSNSResponse>
            {
                Data = new CheckSNSResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<CheckSNSRequest, CheckSNSResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CheckSNSRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.CheckSNSAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<CheckSNSRequest, CheckSNSResponse>(
                "POST",
                "/api/v2/check_sns",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CheckSNSRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task CheckSQSAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new CheckSQSRequest();

            var expectedResponse = new StreamResponse<CheckSQSResponse>
            {
                Data = new CheckSQSResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<CheckSQSRequest, CheckSQSResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CheckSQSRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.CheckSQSAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<CheckSQSRequest, CheckSQSResponse>(
                "POST",
                "/api/v2/check_sqs",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CheckSQSRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task DeleteDeviceAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;

            var expectedResponse = new StreamResponse<Response>
            {
                Data = new Response()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, Response>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.DeleteDeviceAsync(null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, Response>(
                "DELETE",
                "/api/v2/devices",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task ListDevicesAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;

            var expectedResponse = new StreamResponse<ListDevicesResponse>
            {
                Data = new ListDevicesResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, ListDevicesResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.ListDevicesAsync(null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, ListDevicesResponse>(
                "GET",
                "/api/v2/devices",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task CreateDeviceAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new CreateDeviceRequest();

            var expectedResponse = new StreamResponse<Response>
            {
                Data = new Response()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<CreateDeviceRequest, Response>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CreateDeviceRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.CreateDeviceAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<CreateDeviceRequest, Response>(
                "POST",
                "/api/v2/devices",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CreateDeviceRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task ExportUsersAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new ExportUsersRequest();

            var expectedResponse = new StreamResponse<ExportUsersResponse>
            {
                Data = new ExportUsersResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<ExportUsersRequest, ExportUsersResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<ExportUsersRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.ExportUsersAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<ExportUsersRequest, ExportUsersResponse>(
                "POST",
                "/api/v2/export/users",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<ExportUsersRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task ListExternalStorageAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;

            var expectedResponse = new StreamResponse<ListExternalStorageResponse>
            {
                Data = new ListExternalStorageResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, ListExternalStorageResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.ListExternalStorageAsync(null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, ListExternalStorageResponse>(
                "GET",
                "/api/v2/external_storage",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task CreateExternalStorageAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new CreateExternalStorageRequest();

            var expectedResponse = new StreamResponse<CreateExternalStorageResponse>
            {
                Data = new CreateExternalStorageResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<CreateExternalStorageRequest, CreateExternalStorageResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CreateExternalStorageRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.CreateExternalStorageAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<CreateExternalStorageRequest, CreateExternalStorageResponse>(
                "POST",
                "/api/v2/external_storage",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CreateExternalStorageRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task DeleteExternalStorageAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var Name = "test-Name";

            var expectedResponse = new StreamResponse<DeleteExternalStorageResponse>
            {
                Data = new DeleteExternalStorageResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, DeleteExternalStorageResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.DeleteExternalStorageAsync(Name,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, DeleteExternalStorageResponse>(
                "DELETE",
                "/api/v2/external_storage/{name}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UpdateExternalStorageAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateExternalStorageRequest();
            var Name = "test-Name";

            var expectedResponse = new StreamResponse<UpdateExternalStorageResponse>
            {
                Data = new UpdateExternalStorageResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<UpdateExternalStorageRequest, UpdateExternalStorageResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateExternalStorageRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UpdateExternalStorageAsync(Name,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<UpdateExternalStorageRequest, UpdateExternalStorageResponse>(
                "PUT",
                "/api/v2/external_storage/{name}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateExternalStorageRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task CheckExternalStorageAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var Name = "test-Name";

            var expectedResponse = new StreamResponse<CheckExternalStorageResponse>
            {
                Data = new CheckExternalStorageResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, CheckExternalStorageResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.CheckExternalStorageAsync(Name,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, CheckExternalStorageResponse>(
                "GET",
                "/api/v2/external_storage/{name}/check",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task AddActivityAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new AddActivityRequest();

            var expectedResponse = new StreamResponse<AddActivityResponse>
            {
                Data = new AddActivityResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<AddActivityRequest, AddActivityResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<AddActivityRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.AddActivityAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<AddActivityRequest, AddActivityResponse>(
                "POST",
                "/api/v2/feeds/activities",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<AddActivityRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UpsertActivitiesAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpsertActivitiesRequest();

            var expectedResponse = new StreamResponse<UpsertActivitiesResponse>
            {
                Data = new UpsertActivitiesResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<UpsertActivitiesRequest, UpsertActivitiesResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpsertActivitiesRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UpsertActivitiesAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<UpsertActivitiesRequest, UpsertActivitiesResponse>(
                "POST",
                "/api/v2/feeds/activities/batch",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpsertActivitiesRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task DeleteActivitiesAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new DeleteActivitiesRequest();

            var expectedResponse = new StreamResponse<DeleteActivitiesResponse>
            {
                Data = new DeleteActivitiesResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<DeleteActivitiesRequest, DeleteActivitiesResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<DeleteActivitiesRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.DeleteActivitiesAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<DeleteActivitiesRequest, DeleteActivitiesResponse>(
                "POST",
                "/api/v2/feeds/activities/delete",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<DeleteActivitiesRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task QueryActivitiesAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new QueryActivitiesRequest();

            var expectedResponse = new StreamResponse<QueryActivitiesResponse>
            {
                Data = new QueryActivitiesResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<QueryActivitiesRequest, QueryActivitiesResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<QueryActivitiesRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.QueryActivitiesAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<QueryActivitiesRequest, QueryActivitiesResponse>(
                "POST",
                "/api/v2/feeds/activities/query",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<QueryActivitiesRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task DeleteActivityAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var ActivityID = "test-ActivityID";

            var expectedResponse = new StreamResponse<DeleteActivityResponse>
            {
                Data = new DeleteActivityResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, DeleteActivityResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.DeleteActivityAsync(ActivityID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, DeleteActivityResponse>(
                "DELETE",
                "/api/v2/feeds/activities/{activity_id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task GetActivityAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var ActivityID = "test-ActivityID";

            var expectedResponse = new StreamResponse<GetActivityResponse>
            {
                Data = new GetActivityResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, GetActivityResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.GetActivityAsync(ActivityID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, GetActivityResponse>(
                "GET",
                "/api/v2/feeds/activities/{activity_id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UpdateActivityPartialAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateActivityPartialRequest();
            var ActivityID = "test-ActivityID";

            var expectedResponse = new StreamResponse<UpdateActivityPartialResponse>
            {
                Data = new UpdateActivityPartialResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<UpdateActivityPartialRequest, UpdateActivityPartialResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateActivityPartialRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UpdateActivityPartialAsync(ActivityID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<UpdateActivityPartialRequest, UpdateActivityPartialResponse>(
                "PATCH",
                "/api/v2/feeds/activities/{activity_id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateActivityPartialRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UpdateActivityAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateActivityRequest();
            var ActivityID = "test-ActivityID";

            var expectedResponse = new StreamResponse<UpdateActivityResponse>
            {
                Data = new UpdateActivityResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<UpdateActivityRequest, UpdateActivityResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateActivityRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UpdateActivityAsync(ActivityID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<UpdateActivityRequest, UpdateActivityResponse>(
                "PUT",
                "/api/v2/feeds/activities/{activity_id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateActivityRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task DeleteBookmarkAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var ActivityID = "test-ActivityID";

            var expectedResponse = new StreamResponse<DeleteBookmarkResponse>
            {
                Data = new DeleteBookmarkResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, DeleteBookmarkResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.DeleteBookmarkAsync(ActivityID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, DeleteBookmarkResponse>(
                "DELETE",
                "/api/v2/feeds/activities/{activity_id}/bookmarks",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UpdateBookmarkAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateBookmarkRequest();
            var ActivityID = "test-ActivityID";

            var expectedResponse = new StreamResponse<UpdateBookmarkResponse>
            {
                Data = new UpdateBookmarkResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<UpdateBookmarkRequest, UpdateBookmarkResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateBookmarkRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UpdateBookmarkAsync(ActivityID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<UpdateBookmarkRequest, UpdateBookmarkResponse>(
                "PATCH",
                "/api/v2/feeds/activities/{activity_id}/bookmarks",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateBookmarkRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task AddBookmarkAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new AddBookmarkRequest();
            var ActivityID = "test-ActivityID";

            var expectedResponse = new StreamResponse<AddBookmarkResponse>
            {
                Data = new AddBookmarkResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<AddBookmarkRequest, AddBookmarkResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<AddBookmarkRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.AddBookmarkAsync(ActivityID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<AddBookmarkRequest, AddBookmarkResponse>(
                "POST",
                "/api/v2/feeds/activities/{activity_id}/bookmarks",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<AddBookmarkRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task CastPollVoteAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new CastPollVoteRequest();
            var ActivityID = "test-ActivityID";
            var PollID = "test-PollID";

            var expectedResponse = new StreamResponse<PollVoteResponse>
            {
                Data = new PollVoteResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<CastPollVoteRequest, PollVoteResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CastPollVoteRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.CastPollVoteAsync(ActivityID, PollID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<CastPollVoteRequest, PollVoteResponse>(
                "POST",
                "/api/v2/feeds/activities/{activity_id}/polls/{poll_id}/vote",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CastPollVoteRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task DeletePollVoteAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var ActivityID = "test-ActivityID";
            var PollID = "test-PollID";
            var VoteID = "test-VoteID";

            var expectedResponse = new StreamResponse<PollVoteResponse>
            {
                Data = new PollVoteResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, PollVoteResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.DeletePollVoteAsync(ActivityID, PollID, VoteID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, PollVoteResponse>(
                "DELETE",
                "/api/v2/feeds/activities/{activity_id}/polls/{poll_id}/vote/{vote_id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task AddReactionAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new AddReactionRequest();
            var ActivityID = "test-ActivityID";

            var expectedResponse = new StreamResponse<AddReactionResponse>
            {
                Data = new AddReactionResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<AddReactionRequest, AddReactionResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<AddReactionRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.AddReactionAsync(ActivityID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<AddReactionRequest, AddReactionResponse>(
                "POST",
                "/api/v2/feeds/activities/{activity_id}/reactions",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<AddReactionRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task QueryActivityReactionsAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new QueryActivityReactionsRequest();
            var ActivityID = "test-ActivityID";

            var expectedResponse = new StreamResponse<QueryActivityReactionsResponse>
            {
                Data = new QueryActivityReactionsResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<QueryActivityReactionsRequest, QueryActivityReactionsResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<QueryActivityReactionsRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.QueryActivityReactionsAsync(ActivityID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<QueryActivityReactionsRequest, QueryActivityReactionsResponse>(
                "POST",
                "/api/v2/feeds/activities/{activity_id}/reactions/query",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<QueryActivityReactionsRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task DeleteActivityReactionAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var ActivityID = "test-ActivityID";
            var Type = "test-Type";

            var expectedResponse = new StreamResponse<DeleteActivityReactionResponse>
            {
                Data = new DeleteActivityReactionResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, DeleteActivityReactionResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.DeleteActivityReactionAsync(ActivityID, Type,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, DeleteActivityReactionResponse>(
                "DELETE",
                "/api/v2/feeds/activities/{activity_id}/reactions/{type}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task QueryBookmarkFoldersAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new QueryBookmarkFoldersRequest();

            var expectedResponse = new StreamResponse<QueryBookmarkFoldersResponse>
            {
                Data = new QueryBookmarkFoldersResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<QueryBookmarkFoldersRequest, QueryBookmarkFoldersResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<QueryBookmarkFoldersRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.QueryBookmarkFoldersAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<QueryBookmarkFoldersRequest, QueryBookmarkFoldersResponse>(
                "POST",
                "/api/v2/feeds/bookmark_folders/query",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<QueryBookmarkFoldersRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task DeleteBookmarkFolderAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var FolderID = "test-FolderID";

            var expectedResponse = new StreamResponse<DeleteBookmarkFolderResponse>
            {
                Data = new DeleteBookmarkFolderResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, DeleteBookmarkFolderResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.DeleteBookmarkFolderAsync(FolderID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, DeleteBookmarkFolderResponse>(
                "DELETE",
                "/api/v2/feeds/bookmark_folders/{folder_id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UpdateBookmarkFolderAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateBookmarkFolderRequest();
            var FolderID = "test-FolderID";

            var expectedResponse = new StreamResponse<UpdateBookmarkFolderResponse>
            {
                Data = new UpdateBookmarkFolderResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<UpdateBookmarkFolderRequest, UpdateBookmarkFolderResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateBookmarkFolderRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UpdateBookmarkFolderAsync(FolderID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<UpdateBookmarkFolderRequest, UpdateBookmarkFolderResponse>(
                "PATCH",
                "/api/v2/feeds/bookmark_folders/{folder_id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateBookmarkFolderRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task QueryBookmarksAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new QueryBookmarksRequest();

            var expectedResponse = new StreamResponse<QueryBookmarksResponse>
            {
                Data = new QueryBookmarksResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<QueryBookmarksRequest, QueryBookmarksResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<QueryBookmarksRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.QueryBookmarksAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<QueryBookmarksRequest, QueryBookmarksResponse>(
                "POST",
                "/api/v2/feeds/bookmarks/query",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<QueryBookmarksRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task GetCommentsAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;

            var expectedResponse = new StreamResponse<GetCommentsResponse>
            {
                Data = new GetCommentsResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, GetCommentsResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.GetCommentsAsync(null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, GetCommentsResponse>(
                "GET",
                "/api/v2/feeds/comments",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task AddCommentAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new AddCommentRequest();

            var expectedResponse = new StreamResponse<AddCommentResponse>
            {
                Data = new AddCommentResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<AddCommentRequest, AddCommentResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<AddCommentRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.AddCommentAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<AddCommentRequest, AddCommentResponse>(
                "POST",
                "/api/v2/feeds/comments",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<AddCommentRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task AddCommentsBatchAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new AddCommentsBatchRequest();

            var expectedResponse = new StreamResponse<AddCommentsBatchResponse>
            {
                Data = new AddCommentsBatchResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<AddCommentsBatchRequest, AddCommentsBatchResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<AddCommentsBatchRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.AddCommentsBatchAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<AddCommentsBatchRequest, AddCommentsBatchResponse>(
                "POST",
                "/api/v2/feeds/comments/batch",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<AddCommentsBatchRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task QueryCommentsAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new QueryCommentsRequest();

            var expectedResponse = new StreamResponse<QueryCommentsResponse>
            {
                Data = new QueryCommentsResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<QueryCommentsRequest, QueryCommentsResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<QueryCommentsRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.QueryCommentsAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<QueryCommentsRequest, QueryCommentsResponse>(
                "POST",
                "/api/v2/feeds/comments/query",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<QueryCommentsRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task DeleteCommentAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var CommentID = "test-CommentID";

            var expectedResponse = new StreamResponse<DeleteCommentResponse>
            {
                Data = new DeleteCommentResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, DeleteCommentResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.DeleteCommentAsync(CommentID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, DeleteCommentResponse>(
                "DELETE",
                "/api/v2/feeds/comments/{comment_id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task GetCommentAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var CommentID = "test-CommentID";

            var expectedResponse = new StreamResponse<GetCommentResponse>
            {
                Data = new GetCommentResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, GetCommentResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.GetCommentAsync(CommentID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, GetCommentResponse>(
                "GET",
                "/api/v2/feeds/comments/{comment_id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UpdateCommentAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateCommentRequest();
            var CommentID = "test-CommentID";

            var expectedResponse = new StreamResponse<UpdateCommentResponse>
            {
                Data = new UpdateCommentResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<UpdateCommentRequest, UpdateCommentResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateCommentRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UpdateCommentAsync(CommentID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<UpdateCommentRequest, UpdateCommentResponse>(
                "PATCH",
                "/api/v2/feeds/comments/{comment_id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateCommentRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task AddCommentReactionAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new AddCommentReactionRequest();
            var CommentID = "test-CommentID";

            var expectedResponse = new StreamResponse<AddCommentReactionResponse>
            {
                Data = new AddCommentReactionResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<AddCommentReactionRequest, AddCommentReactionResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<AddCommentReactionRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.AddCommentReactionAsync(CommentID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<AddCommentReactionRequest, AddCommentReactionResponse>(
                "POST",
                "/api/v2/feeds/comments/{comment_id}/reactions",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<AddCommentReactionRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task QueryCommentReactionsAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new QueryCommentReactionsRequest();
            var CommentID = "test-CommentID";

            var expectedResponse = new StreamResponse<QueryCommentReactionsResponse>
            {
                Data = new QueryCommentReactionsResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<QueryCommentReactionsRequest, QueryCommentReactionsResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<QueryCommentReactionsRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.QueryCommentReactionsAsync(CommentID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<QueryCommentReactionsRequest, QueryCommentReactionsResponse>(
                "POST",
                "/api/v2/feeds/comments/{comment_id}/reactions/query",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<QueryCommentReactionsRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task DeleteCommentReactionAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var CommentID = "test-CommentID";
            var Type = "test-Type";

            var expectedResponse = new StreamResponse<DeleteCommentReactionResponse>
            {
                Data = new DeleteCommentReactionResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, DeleteCommentReactionResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.DeleteCommentReactionAsync(CommentID, Type,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, DeleteCommentReactionResponse>(
                "DELETE",
                "/api/v2/feeds/comments/{comment_id}/reactions/{type}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task GetCommentRepliesAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var CommentID = "test-CommentID";

            var expectedResponse = new StreamResponse<GetCommentRepliesResponse>
            {
                Data = new GetCommentRepliesResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, GetCommentRepliesResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.GetCommentRepliesAsync(CommentID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, GetCommentRepliesResponse>(
                "GET",
                "/api/v2/feeds/comments/{comment_id}/replies",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task ListFeedGroupsAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;

            var expectedResponse = new StreamResponse<ListFeedGroupsResponse>
            {
                Data = new ListFeedGroupsResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, ListFeedGroupsResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.ListFeedGroupsAsync(null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, ListFeedGroupsResponse>(
                "GET",
                "/api/v2/feeds/feed_groups",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task CreateFeedGroupAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new CreateFeedGroupRequest();

            var expectedResponse = new StreamResponse<CreateFeedGroupResponse>
            {
                Data = new CreateFeedGroupResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<CreateFeedGroupRequest, CreateFeedGroupResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CreateFeedGroupRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.CreateFeedGroupAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<CreateFeedGroupRequest, CreateFeedGroupResponse>(
                "POST",
                "/api/v2/feeds/feed_groups",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CreateFeedGroupRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task DeleteFeedGroupAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var FeedGroupID = "test-FeedGroupID";

            var expectedResponse = new StreamResponse<DeleteFeedGroupResponse>
            {
                Data = new DeleteFeedGroupResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, DeleteFeedGroupResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.DeleteFeedGroupAsync(FeedGroupID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, DeleteFeedGroupResponse>(
                "DELETE",
                "/api/v2/feeds/feed_groups/{feed_group_id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task GetFeedGroupAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var FeedGroupID = "test-FeedGroupID";

            var expectedResponse = new StreamResponse<GetFeedGroupResponse>
            {
                Data = new GetFeedGroupResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, GetFeedGroupResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.GetFeedGroupAsync(FeedGroupID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, GetFeedGroupResponse>(
                "GET",
                "/api/v2/feeds/feed_groups/{feed_group_id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UpdateFeedGroupAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateFeedGroupRequest();
            var FeedGroupID = "test-FeedGroupID";

            var expectedResponse = new StreamResponse<UpdateFeedGroupResponse>
            {
                Data = new UpdateFeedGroupResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<UpdateFeedGroupRequest, UpdateFeedGroupResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateFeedGroupRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UpdateFeedGroupAsync(FeedGroupID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<UpdateFeedGroupRequest, UpdateFeedGroupResponse>(
                "PUT",
                "/api/v2/feeds/feed_groups/{feed_group_id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateFeedGroupRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task DeleteFeedAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var FeedGroupID = "test-FeedGroupID";
            var FeedID = "test-FeedID";

            var expectedResponse = new StreamResponse<DeleteFeedResponse>
            {
                Data = new DeleteFeedResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, DeleteFeedResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.DeleteFeedAsync(FeedGroupID, FeedID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, DeleteFeedResponse>(
                "DELETE",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task GetOrCreateFeedAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new GetOrCreateFeedRequest();
            var FeedGroupID = "test-FeedGroupID";
            var FeedID = "test-FeedID";

            var expectedResponse = new StreamResponse<GetOrCreateFeedResponse>
            {
                Data = new GetOrCreateFeedResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<GetOrCreateFeedRequest, GetOrCreateFeedResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<GetOrCreateFeedRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.GetOrCreateFeedAsync(FeedGroupID, FeedID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<GetOrCreateFeedRequest, GetOrCreateFeedResponse>(
                "POST",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<GetOrCreateFeedRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UpdateFeedAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateFeedRequest();
            var FeedGroupID = "test-FeedGroupID";
            var FeedID = "test-FeedID";

            var expectedResponse = new StreamResponse<UpdateFeedResponse>
            {
                Data = new UpdateFeedResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<UpdateFeedRequest, UpdateFeedResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateFeedRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UpdateFeedAsync(FeedGroupID, FeedID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<UpdateFeedRequest, UpdateFeedResponse>(
                "PUT",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateFeedRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task MarkActivityAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new MarkActivityRequest();
            var FeedGroupID = "test-FeedGroupID";
            var FeedID = "test-FeedID";

            var expectedResponse = new StreamResponse<Response>
            {
                Data = new Response()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<MarkActivityRequest, Response>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<MarkActivityRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.MarkActivityAsync(FeedGroupID, FeedID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<MarkActivityRequest, Response>(
                "POST",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/activities/mark/batch",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<MarkActivityRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UnpinActivityAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var FeedGroupID = "test-FeedGroupID";
            var FeedID = "test-FeedID";
            var ActivityID = "test-ActivityID";

            var expectedResponse = new StreamResponse<UnpinActivityResponse>
            {
                Data = new UnpinActivityResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, UnpinActivityResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UnpinActivityAsync(FeedGroupID, FeedID, ActivityID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, UnpinActivityResponse>(
                "DELETE",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/activities/{activity_id}/pin",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task PinActivityAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new PinActivityRequest();
            var FeedGroupID = "test-FeedGroupID";
            var FeedID = "test-FeedID";
            var ActivityID = "test-ActivityID";

            var expectedResponse = new StreamResponse<PinActivityResponse>
            {
                Data = new PinActivityResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<PinActivityRequest, PinActivityResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<PinActivityRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.PinActivityAsync(FeedGroupID, FeedID, ActivityID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<PinActivityRequest, PinActivityResponse>(
                "POST",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/activities/{activity_id}/pin",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<PinActivityRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UpdateFeedMembersAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateFeedMembersRequest();
            var FeedGroupID = "test-FeedGroupID";
            var FeedID = "test-FeedID";

            var expectedResponse = new StreamResponse<UpdateFeedMembersResponse>
            {
                Data = new UpdateFeedMembersResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<UpdateFeedMembersRequest, UpdateFeedMembersResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateFeedMembersRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UpdateFeedMembersAsync(FeedGroupID, FeedID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<UpdateFeedMembersRequest, UpdateFeedMembersResponse>(
                "PATCH",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateFeedMembersRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task AcceptFeedMemberInviteAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new AcceptFeedMemberInviteRequest();
            var FeedID = "test-FeedID";
            var FeedGroupID = "test-FeedGroupID";

            var expectedResponse = new StreamResponse<AcceptFeedMemberInviteResponse>
            {
                Data = new AcceptFeedMemberInviteResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<AcceptFeedMemberInviteRequest, AcceptFeedMemberInviteResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<AcceptFeedMemberInviteRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.AcceptFeedMemberInviteAsync(FeedID, FeedGroupID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<AcceptFeedMemberInviteRequest, AcceptFeedMemberInviteResponse>(
                "POST",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members/accept",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<AcceptFeedMemberInviteRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task QueryFeedMembersAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new QueryFeedMembersRequest();
            var FeedGroupID = "test-FeedGroupID";
            var FeedID = "test-FeedID";

            var expectedResponse = new StreamResponse<QueryFeedMembersResponse>
            {
                Data = new QueryFeedMembersResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<QueryFeedMembersRequest, QueryFeedMembersResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<QueryFeedMembersRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.QueryFeedMembersAsync(FeedGroupID, FeedID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<QueryFeedMembersRequest, QueryFeedMembersResponse>(
                "POST",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members/query",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<QueryFeedMembersRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task RejectFeedMemberInviteAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new RejectFeedMemberInviteRequest();
            var FeedGroupID = "test-FeedGroupID";
            var FeedID = "test-FeedID";

            var expectedResponse = new StreamResponse<RejectFeedMemberInviteResponse>
            {
                Data = new RejectFeedMemberInviteResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<RejectFeedMemberInviteRequest, RejectFeedMemberInviteResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<RejectFeedMemberInviteRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.RejectFeedMemberInviteAsync(FeedGroupID, FeedID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<RejectFeedMemberInviteRequest, RejectFeedMemberInviteResponse>(
                "POST",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members/reject",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<RejectFeedMemberInviteRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task GetFollowSuggestionsAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var FeedGroupID = "test-FeedGroupID";

            var expectedResponse = new StreamResponse<GetFollowSuggestionsResponse>
            {
                Data = new GetFollowSuggestionsResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, GetFollowSuggestionsResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.GetFollowSuggestionsAsync(FeedGroupID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, GetFollowSuggestionsResponse>(
                "GET",
                "/api/v2/feeds/feed_groups/{feed_group_id}/follow_suggestions",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task ListFeedViewsAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;

            var expectedResponse = new StreamResponse<ListFeedViewsResponse>
            {
                Data = new ListFeedViewsResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, ListFeedViewsResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.ListFeedViewsAsync(null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, ListFeedViewsResponse>(
                "GET",
                "/api/v2/feeds/feed_views",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task CreateFeedViewAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new CreateFeedViewRequest();

            var expectedResponse = new StreamResponse<CreateFeedViewResponse>
            {
                Data = new CreateFeedViewResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<CreateFeedViewRequest, CreateFeedViewResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CreateFeedViewRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.CreateFeedViewAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<CreateFeedViewRequest, CreateFeedViewResponse>(
                "POST",
                "/api/v2/feeds/feed_views",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CreateFeedViewRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task DeleteFeedViewAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var ViewID = "test-ViewID";

            var expectedResponse = new StreamResponse<DeleteFeedViewResponse>
            {
                Data = new DeleteFeedViewResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, DeleteFeedViewResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.DeleteFeedViewAsync(ViewID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, DeleteFeedViewResponse>(
                "DELETE",
                "/api/v2/feeds/feed_views/{view_id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task GetFeedViewAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var ViewID = "test-ViewID";

            var expectedResponse = new StreamResponse<GetFeedViewResponse>
            {
                Data = new GetFeedViewResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, GetFeedViewResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.GetFeedViewAsync(ViewID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, GetFeedViewResponse>(
                "GET",
                "/api/v2/feeds/feed_views/{view_id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UpdateFeedViewAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateFeedViewRequest();
            var ViewID = "test-ViewID";

            var expectedResponse = new StreamResponse<UpdateFeedViewResponse>
            {
                Data = new UpdateFeedViewResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<UpdateFeedViewRequest, UpdateFeedViewResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateFeedViewRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UpdateFeedViewAsync(ViewID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<UpdateFeedViewRequest, UpdateFeedViewResponse>(
                "PUT",
                "/api/v2/feeds/feed_views/{view_id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateFeedViewRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task CreateFeedsBatchAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new CreateFeedsBatchRequest();

            var expectedResponse = new StreamResponse<CreateFeedsBatchResponse>
            {
                Data = new CreateFeedsBatchResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<CreateFeedsBatchRequest, CreateFeedsBatchResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CreateFeedsBatchRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.CreateFeedsBatchAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<CreateFeedsBatchRequest, CreateFeedsBatchResponse>(
                "POST",
                "/api/v2/feeds/feeds/batch",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CreateFeedsBatchRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task QueryFeedsAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new QueryFeedsRequest();

            var expectedResponse = new StreamResponse<QueryFeedsResponse>
            {
                Data = new QueryFeedsResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<QueryFeedsRequest, QueryFeedsResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<QueryFeedsRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.QueryFeedsAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<QueryFeedsRequest, QueryFeedsResponse>(
                "POST",
                "/api/v2/feeds/feeds/query",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<QueryFeedsRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UpdateFollowAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateFollowRequest();

            var expectedResponse = new StreamResponse<UpdateFollowResponse>
            {
                Data = new UpdateFollowResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<UpdateFollowRequest, UpdateFollowResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateFollowRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UpdateFollowAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<UpdateFollowRequest, UpdateFollowResponse>(
                "PATCH",
                "/api/v2/feeds/follows",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateFollowRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task FollowAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new FollowRequest();

            var expectedResponse = new StreamResponse<SingleFollowResponse>
            {
                Data = new SingleFollowResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<FollowRequest, SingleFollowResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<FollowRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.FollowAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<FollowRequest, SingleFollowResponse>(
                "POST",
                "/api/v2/feeds/follows",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<FollowRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task AcceptFollowAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new AcceptFollowRequest();

            var expectedResponse = new StreamResponse<AcceptFollowResponse>
            {
                Data = new AcceptFollowResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<AcceptFollowRequest, AcceptFollowResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<AcceptFollowRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.AcceptFollowAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<AcceptFollowRequest, AcceptFollowResponse>(
                "POST",
                "/api/v2/feeds/follows/accept",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<AcceptFollowRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task FollowBatchAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new FollowBatchRequest();

            var expectedResponse = new StreamResponse<FollowBatchResponse>
            {
                Data = new FollowBatchResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<FollowBatchRequest, FollowBatchResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<FollowBatchRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.FollowBatchAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<FollowBatchRequest, FollowBatchResponse>(
                "POST",
                "/api/v2/feeds/follows/batch",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<FollowBatchRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task QueryFollowsAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new QueryFollowsRequest();

            var expectedResponse = new StreamResponse<QueryFollowsResponse>
            {
                Data = new QueryFollowsResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<QueryFollowsRequest, QueryFollowsResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<QueryFollowsRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.QueryFollowsAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<QueryFollowsRequest, QueryFollowsResponse>(
                "POST",
                "/api/v2/feeds/follows/query",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<QueryFollowsRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task RejectFollowAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new RejectFollowRequest();

            var expectedResponse = new StreamResponse<RejectFollowResponse>
            {
                Data = new RejectFollowResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<RejectFollowRequest, RejectFollowResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<RejectFollowRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.RejectFollowAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<RejectFollowRequest, RejectFollowResponse>(
                "POST",
                "/api/v2/feeds/follows/reject",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<RejectFollowRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UnfollowAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var Source = "test-Source";
            var Target = "test-Target";

            var expectedResponse = new StreamResponse<UnfollowResponse>
            {
                Data = new UnfollowResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, UnfollowResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UnfollowAsync(Source, Target,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, UnfollowResponse>(
                "DELETE",
                "/api/v2/feeds/follows/{source}/{target}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UnfollowBatchAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UnfollowBatchRequest();

            var expectedResponse = new StreamResponse<UnfollowBatchResponse>
            {
                Data = new UnfollowBatchResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<UnfollowBatchRequest, UnfollowBatchResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UnfollowBatchRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UnfollowBatchAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<UnfollowBatchRequest, UnfollowBatchResponse>(
                "POST",
                "/api/v2/feeds/unfollow/batch",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UnfollowBatchRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task DeleteFeedUserDataAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var UserID = "test-UserID";

            var expectedResponse = new StreamResponse<DeleteFeedUserDataResponse>
            {
                Data = new DeleteFeedUserDataResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, DeleteFeedUserDataResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.DeleteFeedUserDataAsync(UserID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, DeleteFeedUserDataResponse>(
                "DELETE",
                "/api/v2/feeds/users/{user_id}/delete",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task ExportFeedUserDataAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var UserID = "test-UserID";

            var expectedResponse = new StreamResponse<ExportFeedUserDataResponse>
            {
                Data = new ExportFeedUserDataResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, ExportFeedUserDataResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.ExportFeedUserDataAsync(UserID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, ExportFeedUserDataResponse>(
                "POST",
                "/api/v2/feeds/users/{user_id}/export",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task CreateGuestAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new CreateGuestRequest();

            var expectedResponse = new StreamResponse<CreateGuestResponse>
            {
                Data = new CreateGuestResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<CreateGuestRequest, CreateGuestResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CreateGuestRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.CreateGuestAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<CreateGuestRequest, CreateGuestResponse>(
                "POST",
                "/api/v2/guest",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CreateGuestRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task CreateImportURLAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new CreateImportURLRequest();

            var expectedResponse = new StreamResponse<CreateImportURLResponse>
            {
                Data = new CreateImportURLResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<CreateImportURLRequest, CreateImportURLResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CreateImportURLRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.CreateImportURLAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<CreateImportURLRequest, CreateImportURLResponse>(
                "POST",
                "/api/v2/import_urls",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CreateImportURLRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task ListImportsAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;

            var expectedResponse = new StreamResponse<ListImportsResponse>
            {
                Data = new ListImportsResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, ListImportsResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.ListImportsAsync(null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, ListImportsResponse>(
                "GET",
                "/api/v2/imports",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task CreateImportAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new CreateImportRequest();

            var expectedResponse = new StreamResponse<CreateImportResponse>
            {
                Data = new CreateImportResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<CreateImportRequest, CreateImportResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CreateImportRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.CreateImportAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<CreateImportRequest, CreateImportResponse>(
                "POST",
                "/api/v2/imports",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CreateImportRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task GetImportAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var ID = "test-ID";

            var expectedResponse = new StreamResponse<GetImportResponse>
            {
                Data = new GetImportResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, GetImportResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.GetImportAsync(ID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, GetImportResponse>(
                "GET",
                "/api/v2/imports/{id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task GetOGAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;

            var expectedResponse = new StreamResponse<GetOGResponse>
            {
                Data = new GetOGResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, GetOGResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.GetOGAsync(null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, GetOGResponse>(
                "GET",
                "/api/v2/og",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task ListPermissionsAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;

            var expectedResponse = new StreamResponse<ListPermissionsResponse>
            {
                Data = new ListPermissionsResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, ListPermissionsResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.ListPermissionsAsync(null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, ListPermissionsResponse>(
                "GET",
                "/api/v2/permissions",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task GetPermissionAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var ID = "test-ID";

            var expectedResponse = new StreamResponse<GetCustomPermissionResponse>
            {
                Data = new GetCustomPermissionResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, GetCustomPermissionResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.GetPermissionAsync(ID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, GetCustomPermissionResponse>(
                "GET",
                "/api/v2/permissions/{id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task CreatePollAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new CreatePollRequest();

            var expectedResponse = new StreamResponse<PollResponse>
            {
                Data = new PollResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<CreatePollRequest, PollResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CreatePollRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.CreatePollAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<CreatePollRequest, PollResponse>(
                "POST",
                "/api/v2/polls",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CreatePollRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UpdatePollAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdatePollRequest();

            var expectedResponse = new StreamResponse<PollResponse>
            {
                Data = new PollResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<UpdatePollRequest, PollResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdatePollRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UpdatePollAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<UpdatePollRequest, PollResponse>(
                "PUT",
                "/api/v2/polls",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdatePollRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task QueryPollsAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new QueryPollsRequest();

            var expectedResponse = new StreamResponse<QueryPollsResponse>
            {
                Data = new QueryPollsResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<QueryPollsRequest, QueryPollsResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<QueryPollsRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.QueryPollsAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<QueryPollsRequest, QueryPollsResponse>(
                "POST",
                "/api/v2/polls/query",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<QueryPollsRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task DeletePollAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var PollID = "test-PollID";

            var expectedResponse = new StreamResponse<Response>
            {
                Data = new Response()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, Response>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.DeletePollAsync(PollID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, Response>(
                "DELETE",
                "/api/v2/polls/{poll_id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task GetPollAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var PollID = "test-PollID";

            var expectedResponse = new StreamResponse<PollResponse>
            {
                Data = new PollResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, PollResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.GetPollAsync(PollID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, PollResponse>(
                "GET",
                "/api/v2/polls/{poll_id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UpdatePollPartialAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdatePollPartialRequest();
            var PollID = "test-PollID";

            var expectedResponse = new StreamResponse<PollResponse>
            {
                Data = new PollResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<UpdatePollPartialRequest, PollResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdatePollPartialRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UpdatePollPartialAsync(PollID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<UpdatePollPartialRequest, PollResponse>(
                "PATCH",
                "/api/v2/polls/{poll_id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdatePollPartialRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task CreatePollOptionAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new CreatePollOptionRequest();
            var PollID = "test-PollID";

            var expectedResponse = new StreamResponse<PollOptionResponse>
            {
                Data = new PollOptionResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<CreatePollOptionRequest, PollOptionResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CreatePollOptionRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.CreatePollOptionAsync(PollID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<CreatePollOptionRequest, PollOptionResponse>(
                "POST",
                "/api/v2/polls/{poll_id}/options",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CreatePollOptionRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UpdatePollOptionAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdatePollOptionRequest();
            var PollID = "test-PollID";

            var expectedResponse = new StreamResponse<PollOptionResponse>
            {
                Data = new PollOptionResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<UpdatePollOptionRequest, PollOptionResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdatePollOptionRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UpdatePollOptionAsync(PollID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<UpdatePollOptionRequest, PollOptionResponse>(
                "PUT",
                "/api/v2/polls/{poll_id}/options",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdatePollOptionRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task DeletePollOptionAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var PollID = "test-PollID";
            var OptionID = "test-OptionID";

            var expectedResponse = new StreamResponse<Response>
            {
                Data = new Response()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, Response>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.DeletePollOptionAsync(PollID, OptionID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, Response>(
                "DELETE",
                "/api/v2/polls/{poll_id}/options/{option_id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task GetPollOptionAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var PollID = "test-PollID";
            var OptionID = "test-OptionID";

            var expectedResponse = new StreamResponse<PollOptionResponse>
            {
                Data = new PollOptionResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, PollOptionResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.GetPollOptionAsync(PollID, OptionID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, PollOptionResponse>(
                "GET",
                "/api/v2/polls/{poll_id}/options/{option_id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task QueryPollVotesAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new QueryPollVotesRequest();
            var PollID = "test-PollID";

            var expectedResponse = new StreamResponse<PollVotesResponse>
            {
                Data = new PollVotesResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<QueryPollVotesRequest, PollVotesResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<QueryPollVotesRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.QueryPollVotesAsync(PollID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<QueryPollVotesRequest, PollVotesResponse>(
                "POST",
                "/api/v2/polls/{poll_id}/votes",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<QueryPollVotesRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task ListPushProvidersAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;

            var expectedResponse = new StreamResponse<ListPushProvidersResponse>
            {
                Data = new ListPushProvidersResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, ListPushProvidersResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.ListPushProvidersAsync(null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, ListPushProvidersResponse>(
                "GET",
                "/api/v2/push_providers",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UpsertPushProviderAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpsertPushProviderRequest();

            var expectedResponse = new StreamResponse<UpsertPushProviderResponse>
            {
                Data = new UpsertPushProviderResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<UpsertPushProviderRequest, UpsertPushProviderResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpsertPushProviderRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UpsertPushProviderAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<UpsertPushProviderRequest, UpsertPushProviderResponse>(
                "POST",
                "/api/v2/push_providers",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpsertPushProviderRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task DeletePushProviderAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var Type = "test-Type";
            var Name = "test-Name";

            var expectedResponse = new StreamResponse<Response>
            {
                Data = new Response()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, Response>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.DeletePushProviderAsync(Type, Name,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, Response>(
                "DELETE",
                "/api/v2/push_providers/{type}/{name}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task GetRateLimitsAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;

            var expectedResponse = new StreamResponse<GetRateLimitsResponse>
            {
                Data = new GetRateLimitsResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, GetRateLimitsResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.GetRateLimitsAsync(null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, GetRateLimitsResponse>(
                "GET",
                "/api/v2/rate_limits",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task ListRolesAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;

            var expectedResponse = new StreamResponse<ListRolesResponse>
            {
                Data = new ListRolesResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, ListRolesResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.ListRolesAsync(null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, ListRolesResponse>(
                "GET",
                "/api/v2/roles",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task CreateRoleAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new CreateRoleRequest();

            var expectedResponse = new StreamResponse<CreateRoleResponse>
            {
                Data = new CreateRoleResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<CreateRoleRequest, CreateRoleResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CreateRoleRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.CreateRoleAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<CreateRoleRequest, CreateRoleResponse>(
                "POST",
                "/api/v2/roles",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CreateRoleRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task DeleteRoleAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var Name = "test-Name";

            var expectedResponse = new StreamResponse<Response>
            {
                Data = new Response()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, Response>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.DeleteRoleAsync(Name,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, Response>(
                "DELETE",
                "/api/v2/roles/{name}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task GetTaskAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var ID = "test-ID";

            var expectedResponse = new StreamResponse<GetTaskResponse>
            {
                Data = new GetTaskResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, GetTaskResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.GetTaskAsync(ID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, GetTaskResponse>(
                "GET",
                "/api/v2/tasks/{id}",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task DeleteFileAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;

            var expectedResponse = new StreamResponse<Response>
            {
                Data = new Response()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, Response>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.DeleteFileAsync(null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, Response>(
                "DELETE",
                "/api/v2/uploads/file",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task FileUploadAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new FileUploadRequest();

            var expectedResponse = new StreamResponse<FileUploadResponse>
            {
                Data = new FileUploadResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<FileUploadRequest, FileUploadResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<FileUploadRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.FileUploadAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<FileUploadRequest, FileUploadResponse>(
                "POST",
                "/api/v2/uploads/file",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<FileUploadRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task DeleteImageAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;

            var expectedResponse = new StreamResponse<Response>
            {
                Data = new Response()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, Response>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.DeleteImageAsync(null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, Response>(
                "DELETE",
                "/api/v2/uploads/image",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task ImageUploadAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new ImageUploadRequest();

            var expectedResponse = new StreamResponse<ImageUploadResponse>
            {
                Data = new ImageUploadResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<ImageUploadRequest, ImageUploadResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<ImageUploadRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.ImageUploadAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<ImageUploadRequest, ImageUploadResponse>(
                "POST",
                "/api/v2/uploads/image",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<ImageUploadRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task QueryUsersAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;

            var expectedResponse = new StreamResponse<QueryUsersResponse>
            {
                Data = new QueryUsersResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, QueryUsersResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.QueryUsersAsync(null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, QueryUsersResponse>(
                "GET",
                "/api/v2/users",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UpdateUsersPartialAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateUsersPartialRequest();

            var expectedResponse = new StreamResponse<UpdateUsersResponse>
            {
                Data = new UpdateUsersResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<UpdateUsersPartialRequest, UpdateUsersResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateUsersPartialRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UpdateUsersPartialAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<UpdateUsersPartialRequest, UpdateUsersResponse>(
                "PATCH",
                "/api/v2/users",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateUsersPartialRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UpdateUsersAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateUsersRequest();

            var expectedResponse = new StreamResponse<UpdateUsersResponse>
            {
                Data = new UpdateUsersResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<UpdateUsersRequest, UpdateUsersResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateUsersRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UpdateUsersAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<UpdateUsersRequest, UpdateUsersResponse>(
                "POST",
                "/api/v2/users",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateUsersRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task GetBlockedUsersAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;

            var expectedResponse = new StreamResponse<GetBlockedUsersResponse>
            {
                Data = new GetBlockedUsersResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, GetBlockedUsersResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.GetBlockedUsersAsync(null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, GetBlockedUsersResponse>(
                "GET",
                "/api/v2/users/block",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task BlockUsersAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new BlockUsersRequest();

            var expectedResponse = new StreamResponse<BlockUsersResponse>
            {
                Data = new BlockUsersResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<BlockUsersRequest, BlockUsersResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<BlockUsersRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.BlockUsersAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<BlockUsersRequest, BlockUsersResponse>(
                "POST",
                "/api/v2/users/block",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<BlockUsersRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task DeactivateUsersAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new DeactivateUsersRequest();

            var expectedResponse = new StreamResponse<DeactivateUsersResponse>
            {
                Data = new DeactivateUsersResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<DeactivateUsersRequest, DeactivateUsersResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<DeactivateUsersRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.DeactivateUsersAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<DeactivateUsersRequest, DeactivateUsersResponse>(
                "POST",
                "/api/v2/users/deactivate",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<DeactivateUsersRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task DeleteUsersAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new DeleteUsersRequest();

            var expectedResponse = new StreamResponse<DeleteUsersResponse>
            {
                Data = new DeleteUsersResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<DeleteUsersRequest, DeleteUsersResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<DeleteUsersRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.DeleteUsersAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<DeleteUsersRequest, DeleteUsersResponse>(
                "POST",
                "/api/v2/users/delete",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<DeleteUsersRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task GetUserLiveLocationsAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;

            var expectedResponse = new StreamResponse<SharedLocationsResponse>
            {
                Data = new SharedLocationsResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, SharedLocationsResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.GetUserLiveLocationsAsync(null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, SharedLocationsResponse>(
                "GET",
                "/api/v2/users/live_locations",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UpdateLiveLocationAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateLiveLocationRequest();

            var expectedResponse = new StreamResponse<SharedLocationResponse>
            {
                Data = new SharedLocationResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<UpdateLiveLocationRequest, SharedLocationResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateLiveLocationRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UpdateLiveLocationAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<UpdateLiveLocationRequest, SharedLocationResponse>(
                "PUT",
                "/api/v2/users/live_locations",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UpdateLiveLocationRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task ReactivateUsersAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new ReactivateUsersRequest();

            var expectedResponse = new StreamResponse<ReactivateUsersResponse>
            {
                Data = new ReactivateUsersResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<ReactivateUsersRequest, ReactivateUsersResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<ReactivateUsersRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.ReactivateUsersAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<ReactivateUsersRequest, ReactivateUsersResponse>(
                "POST",
                "/api/v2/users/reactivate",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<ReactivateUsersRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task RestoreUsersAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new RestoreUsersRequest();

            var expectedResponse = new StreamResponse<Response>
            {
                Data = new Response()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<RestoreUsersRequest, Response>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<RestoreUsersRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.RestoreUsersAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<RestoreUsersRequest, Response>(
                "POST",
                "/api/v2/users/restore",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<RestoreUsersRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task UnblockUsersAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UnblockUsersRequest();

            var expectedResponse = new StreamResponse<UnblockUsersResponse>
            {
                Data = new UnblockUsersResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<UnblockUsersRequest, UnblockUsersResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UnblockUsersRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.UnblockUsersAsync(request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<UnblockUsersRequest, UnblockUsersResponse>(
                "POST",
                "/api/v2/users/unblock",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<UnblockUsersRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task DeactivateUserAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new DeactivateUserRequest();
            var UserID = "test-UserID";

            var expectedResponse = new StreamResponse<DeactivateUserResponse>
            {
                Data = new DeactivateUserResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<DeactivateUserRequest, DeactivateUserResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<DeactivateUserRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.DeactivateUserAsync(UserID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<DeactivateUserRequest, DeactivateUserResponse>(
                "POST",
                "/api/v2/users/{user_id}/deactivate",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<DeactivateUserRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task ExportUserAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            object request = null!;
            var UserID = "test-UserID";

            var expectedResponse = new StreamResponse<ExportUserResponse>
            {
                Data = new ExportUserResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<object, ExportUserResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.ExportUserAsync(UserID,null!);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<object, ExportUserResponse>(
                "GET",
                "/api/v2/users/{user_id}/export",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<object>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
        [Test]
        public async Task ReactivateUserAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new ReactivateUserRequest();
            var UserID = "test-UserID";

            var expectedResponse = new StreamResponse<ReactivateUserResponse>
            {
                Data = new ReactivateUserResponse()
            };

            _mockClient.Setup(x => x.MakeRequestAsync<ReactivateUserRequest, ReactivateUserResponse>(
                It.IsAny<string>(),
                It.IsAny<string>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<ReactivateUserRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _client.ReactivateUserAsync(UserID,request);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result, Is.EqualTo(expectedResponse));
            
            _mockClient.Verify(x => x.MakeRequestAsync<ReactivateUserRequest, ReactivateUserResponse>(
                "POST",
                "/api/v2/users/{user_id}/reactivate",
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<ReactivateUserRequest>(),
                It.IsAny<Dictionary<string, string>>(),
                It.IsAny<CancellationToken>()), Times.Once);
        }
            }
        }