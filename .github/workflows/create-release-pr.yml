name: Create Release PR

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string

env:
  DOTNET_VERSION: '9.0.x'

jobs:
  create-release-pr:
    name: Create Release PR
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install dependencies
        run: dotnet restore

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(grep -oP '<Version>\K[^<]+' src/stream-feed-net.csproj)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          
          case "${{ github.event.inputs.version_type }}" in
              "major")
                  NEW_VERSION="$((major + 1)).0.0"
                  ;;
              "minor")
                  NEW_VERSION="$major.$((minor + 1)).0"
                  ;;
              "patch")
                  NEW_VERSION="$major.$minor.$((patch + 1))"
                  ;;
          esac
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Create release branch
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          RELEASE_BRANCH="release/v$NEW_VERSION"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b "$RELEASE_BRANCH"
          echo "RELEASE_BRANCH=$RELEASE_BRANCH" >> $GITHUB_ENV

      - name: Update version in project file
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          sed -i "s/<Version>.*<\/Version>/<Version>$NEW_VERSION<\/Version>/" src/stream-feed-net.csproj
          echo "Updated version to $NEW_VERSION"

      - name: Run tests
        env:
          STREAM_API_KEY: ${{ vars.STREAM_API_KEY }}
          STREAM_API_SECRET: ${{ secrets.STREAM_API_SECRET }}
          CONFIGURATION: Release
        run: |
          dotnet build --no-restore --configuration Release
          make test

      - name: Commit and push changes
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
          
          git add src/stream-feed-net.csproj
          git commit -m "Bump version to $NEW_VERSION

          Version type: $VERSION_TYPE
          Release notes: ${RELEASE_NOTES:-'Standard $VERSION_TYPE release'}"
          
          git push -u origin "$RELEASE_BRANCH"

      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            const NEW_VERSION = '${{ steps.new_version.outputs.new_version }}';
            const VERSION_TYPE = '${{ github.event.inputs.version_type }}';
            const RELEASE_NOTES = '${{ github.event.inputs.release_notes }}';
            const RELEASE_BRANCH = '${{ env.RELEASE_BRANCH }}';
            
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release v${NEW_VERSION}`,
              head: RELEASE_BRANCH,
              base: 'master',
              body: `## Release v${NEW_VERSION}
              
              **Version Type:** ${VERSION_TYPE}
              
              **Release Notes:**
              ${RELEASE_NOTES || 'Standard ' + VERSION_TYPE + ' release'}
              
              This PR will automatically create a release when merged.
              
              ### Changes
              - [x] Bumped version to ${NEW_VERSION}
              - [x] Updated project file
              - [x] Tests passing
              
              **⚠️ Only repository admins should merge this PR**`
            });
            
            console.log(`✅ Created release PR: ${pr.data.html_url}`);