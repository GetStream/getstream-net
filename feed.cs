// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.
using System;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using GetStream.Models;
using GetStream.Requests;

namespace GetStream
{
    public class FeedClient : BaseClient
    {
        public FeedClient(Client client) : base(client)
        {
        }

        /// Create a new activity or update an existing one
        /// 
        public async Task<StreamResponse<AddActivityResponse>> AddActivityAsync(
            AddActivityRequest request,
            CancellationToken cancellationToken = default)
        {
            
            var result = await MakeRequestAsync<AddActivityRequest, AddActivityResponse>(
                "POST",
                "/api/v2/feeds/activities",null,request,null,
                cancellationToken);
                
            return result;
        }

        /// Create new activities or update existing ones in a batch operation
        /// 
        public async Task<StreamResponse<UpsertActivitiesResponse>> UpsertActivitiesAsync(
            UpsertActivitiesRequest request,
            CancellationToken cancellationToken = default)
        {
            
            var result = await MakeRequestAsync<UpsertActivitiesRequest, UpsertActivitiesResponse>("POST",
                "/api/v2/feeds/activities/batch",null,request,null,
                cancellationToken);
                
            return result;
        }

        /// Delete one or more activities by their IDs
        /// 
        public async Task<StreamResponse<DeleteActivitiesResponse>> DeleteActivitiesAsync(
            DeleteActivitiesRequest request,
            CancellationToken cancellationToken = default)
        {
            
            var result = await MakeRequestAsync<DeleteActivitiesRequest, DeleteActivitiesResponse>("POST",
                "/api/v2/feeds/activities/delete",null,request,null,
                cancellationToken);
                
            return result;
        }

        /// Query activities based on filters with pagination and sorting options
        /// 
        public async Task<StreamResponse<QueryActivitiesResponse>> QueryActivitiesAsync(
            QueryActivitiesRequest request,
            CancellationToken cancellationToken = default)
        {
            
            var result = await MakeRequestAsync<QueryActivitiesRequest, QueryActivitiesResponse>("POST",
                "/api/v2/feeds/activities/query",null,request,null,
                cancellationToken);
                
            return result;
        }

        /// Delete a single activity by its ID
        /// 
        public async Task<StreamResponse<DeleteActivityResponse>> DeleteActivityAsync(string ActivityID,
            DeleteActivityRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["activity_id"] = ActivityID,
            };
            var queryParams = ExtractQueryParams(request);
            
            var result = await MakeRequestAsync<object, DeleteActivityResponse>("DELETE",
                "/api/v2/feeds/activities/{activity_id}",queryParams,null,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Returns activity by ID
        /// 
        public async Task<StreamResponse<GetActivityResponse>> GetActivityAsync(string ActivityID,
            GetActivityRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["activity_id"] = ActivityID,
            };
            
            var result = await MakeRequestAsync<object, GetActivityResponse>("GET",
                "/api/v2/feeds/activities/{activity_id}",null,null,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Updates certain fields of the activity
        /// 
        /// Sends events:
        /// - feeds.activity.updated
        /// 
        public async Task<StreamResponse<UpdateActivityPartialResponse>> UpdateActivityPartialAsync(string ActivityID,
            UpdateActivityPartialRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["activity_id"] = ActivityID,
            };
            
            var result = await MakeRequestAsync<UpdateActivityPartialRequest, UpdateActivityPartialResponse>("PATCH",
                "/api/v2/feeds/activities/{activity_id}",null,request,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Replaces an activity with the provided data
        /// 
        /// Sends events:
        /// - feeds.activity.updated
        /// 
        public async Task<StreamResponse<UpdateActivityResponse>> UpdateActivityAsync(string ActivityID,
            UpdateActivityRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["activity_id"] = ActivityID,
            };
            
            var result = await MakeRequestAsync<UpdateActivityRequest, UpdateActivityResponse>("PUT",
                "/api/v2/feeds/activities/{activity_id}",null,request,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Deletes a bookmark from an activity
        /// 
        public async Task<StreamResponse<DeleteBookmarkResponse>> DeleteBookmarkAsync(string ActivityID,
            DeleteBookmarkRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["activity_id"] = ActivityID,
            };
            var queryParams = ExtractQueryParams(request);
            
            var result = await MakeRequestAsync<object, DeleteBookmarkResponse>("DELETE",
                "/api/v2/feeds/activities/{activity_id}/bookmarks",queryParams,null,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Updates a bookmark for an activity
        /// 
        public async Task<StreamResponse<UpdateBookmarkResponse>> UpdateBookmarkAsync(string ActivityID,
            UpdateBookmarkRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["activity_id"] = ActivityID,
            };
            
            var result = await MakeRequestAsync<UpdateBookmarkRequest, UpdateBookmarkResponse>("PATCH",
                "/api/v2/feeds/activities/{activity_id}/bookmarks",null,request,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Adds a bookmark to an activity
        /// 
        public async Task<StreamResponse<AddBookmarkResponse>> AddBookmarkAsync(string ActivityID,
            AddBookmarkRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["activity_id"] = ActivityID,
            };
            
            var result = await MakeRequestAsync<AddBookmarkRequest, AddBookmarkResponse>("POST",
                "/api/v2/feeds/activities/{activity_id}/bookmarks",null,request,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Cast a vote on a poll
        /// 
        /// Sends events:
        /// - feeds.poll.vote_casted
        /// - feeds.poll.vote_changed
        /// - feeds.poll.vote_removed
        /// - poll.vote_casted
        /// - poll.vote_changed
        /// - poll.vote_removed
        /// 
        public async Task<StreamResponse<PollVoteResponse>> CastPollVoteAsync(string ActivityID, string PollID,
            CastPollVoteRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["activity_id"] = ActivityID,
                ["poll_id"] = PollID,
            };
            
            var result = await MakeRequestAsync<CastPollVoteRequest, PollVoteResponse>("POST",
                "/api/v2/feeds/activities/{activity_id}/polls/{poll_id}/vote",null,request,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Delete a vote from a poll
        /// 
        /// Sends events:
        /// - feeds.poll.vote_removed
        /// - poll.vote_removed
        /// 
        public async Task<StreamResponse<PollVoteResponse>> DeletePollVoteAsync(string ActivityID, string PollID, string VoteID,
            DeletePollVoteRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["activity_id"] = ActivityID,
                ["poll_id"] = PollID,
                ["vote_id"] = VoteID,
            };
            var queryParams = ExtractQueryParams(request);
            
            var result = await MakeRequestAsync<object, PollVoteResponse>("DELETE",
                "/api/v2/feeds/activities/{activity_id}/polls/{poll_id}/vote/{vote_id}",queryParams,null,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Adds a reaction to an activity
        /// 
        public async Task<StreamResponse<AddReactionResponse>> AddReactionAsync(string ActivityID,
            AddReactionRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["activity_id"] = ActivityID,
            };
            
            var result = await MakeRequestAsync<AddReactionRequest, AddReactionResponse>("POST",
                "/api/v2/feeds/activities/{activity_id}/reactions",null,request,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Query activity reactions
        /// 
        public async Task<StreamResponse<QueryActivityReactionsResponse>> QueryActivityReactionsAsync(string ActivityID,
            QueryActivityReactionsRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["activity_id"] = ActivityID,
            };
            
            var result = await MakeRequestAsync<QueryActivityReactionsRequest, QueryActivityReactionsResponse>("POST",
                "/api/v2/feeds/activities/{activity_id}/reactions/query",null,request,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Removes a reaction from an activity
        /// 
        public async Task<StreamResponse<DeleteActivityReactionResponse>> DeleteActivityReactionAsync(string ActivityID, string Type,
            DeleteActivityReactionRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["activity_id"] = ActivityID,
                ["type"] = Type,
            };
            
            var result = await MakeRequestAsync<object, DeleteActivityReactionResponse>("DELETE",
                "/api/v2/feeds/activities/{activity_id}/reactions/{type}",null,null,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Query bookmark folders with filter query
        /// 
        public async Task<StreamResponse<QueryBookmarkFoldersResponse>> QueryBookmarkFoldersAsync(
            QueryBookmarkFoldersRequest request,
            CancellationToken cancellationToken = default)
        {
            
            var result = await MakeRequestAsync<QueryBookmarkFoldersRequest, QueryBookmarkFoldersResponse>("POST",
                "/api/v2/feeds/bookmark_folders/query",null,request,null,
                cancellationToken);
                
            return result;
        }

        /// Delete a bookmark folder by its ID
        /// 
        public async Task<StreamResponse<DeleteBookmarkFolderResponse>> DeleteBookmarkFolderAsync(string FolderID,
            DeleteBookmarkFolderRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["folder_id"] = FolderID,
            };
            
            var result = await MakeRequestAsync<object, DeleteBookmarkFolderResponse>("DELETE",
                "/api/v2/feeds/bookmark_folders/{folder_id}",null,null,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Update a bookmark folder by its ID
        /// 
        public async Task<StreamResponse<UpdateBookmarkFolderResponse>> UpdateBookmarkFolderAsync(string FolderID,
            UpdateBookmarkFolderRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["folder_id"] = FolderID,
            };
            
            var result = await MakeRequestAsync<UpdateBookmarkFolderRequest, UpdateBookmarkFolderResponse>("PATCH",
                "/api/v2/feeds/bookmark_folders/{folder_id}",null,request,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Query bookmarks with filter query
        /// 
        public async Task<StreamResponse<QueryBookmarksResponse>> QueryBookmarksAsync(
            QueryBookmarksRequest request,
            CancellationToken cancellationToken = default)
        {
            
            var result = await MakeRequestAsync<QueryBookmarksRequest, QueryBookmarksResponse>("POST",
                "/api/v2/feeds/bookmarks/query",null,request,null,
                cancellationToken);
                
            return result;
        }

        /// Retrieve a threaded list of comments for a specific object (e.g., activity), with configurable depth, sorting, and pagination
        /// 
        public async Task<StreamResponse<GetCommentsResponse>> GetCommentsAsync(
            GetCommentsRequest request,
            CancellationToken cancellationToken = default)
        {
            var queryParams = ExtractQueryParams(request);
            
            var result = await MakeRequestAsync<object, GetCommentsResponse>("GET",
                "/api/v2/feeds/comments",queryParams,null,null,
                cancellationToken);
                
            return result;
        }

        /// Adds a comment to an object (e.g., activity) or a reply to an existing comment, and broadcasts appropriate events
        /// 
        public async Task<StreamResponse<AddCommentResponse>> AddCommentAsync(
            AddCommentRequest request,
            CancellationToken cancellationToken = default)
        {
            
            var result = await MakeRequestAsync<AddCommentRequest, AddCommentResponse>("POST",
                "/api/v2/feeds/comments",null,request,null,
                cancellationToken);
                
            return result;
        }

        /// Adds multiple comments in a single request. Each comment must specify the object type and ID.
        /// 
        public async Task<StreamResponse<AddCommentsBatchResponse>> AddCommentsBatchAsync(
            AddCommentsBatchRequest request,
            CancellationToken cancellationToken = default)
        {
            
            var result = await MakeRequestAsync<AddCommentsBatchRequest, AddCommentsBatchResponse>("POST",
                "/api/v2/feeds/comments/batch",null,request,null,
                cancellationToken);
                
            return result;
        }

        /// Query comments using MongoDB-style filters with pagination and sorting options
        /// 
        public async Task<StreamResponse<QueryCommentsResponse>> QueryCommentsAsync(
            QueryCommentsRequest request,
            CancellationToken cancellationToken = default)
        {
            
            var result = await MakeRequestAsync<QueryCommentsRequest, QueryCommentsResponse>("POST",
                "/api/v2/feeds/comments/query",null,request,null,
                cancellationToken);
                
            return result;
        }

        /// Deletes a comment from an object (e.g., activity) and broadcasts appropriate events
        /// 
        public async Task<StreamResponse<DeleteCommentResponse>> DeleteCommentAsync(string CommentID,
            DeleteCommentRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["comment_id"] = CommentID,
            };
            
            var result = await MakeRequestAsync<object, DeleteCommentResponse>("DELETE",
                "/api/v2/feeds/comments/{comment_id}",null,null,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Get a comment by ID
        /// 
        public async Task<StreamResponse<GetCommentResponse>> GetCommentAsync(string CommentID,
            GetCommentRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["comment_id"] = CommentID,
            };
            
            var result = await MakeRequestAsync<object, GetCommentResponse>("GET",
                "/api/v2/feeds/comments/{comment_id}",null,null,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Updates a comment on an object (e.g., activity) and broadcasts appropriate events
        /// 
        public async Task<StreamResponse<UpdateCommentResponse>> UpdateCommentAsync(string CommentID,
            UpdateCommentRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["comment_id"] = CommentID,
            };
            
            var result = await MakeRequestAsync<UpdateCommentRequest, UpdateCommentResponse>("PATCH",
                "/api/v2/feeds/comments/{comment_id}",null,request,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Adds a reaction to a comment
        /// 
        public async Task<StreamResponse<AddCommentReactionResponse>> AddCommentReactionAsync(string CommentID,
            AddCommentReactionRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["comment_id"] = CommentID,
            };
            
            var result = await MakeRequestAsync<AddCommentReactionRequest, AddCommentReactionResponse>("POST",
                "/api/v2/feeds/comments/{comment_id}/reactions",null,request,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Query comment reactions
        /// 
        public async Task<StreamResponse<QueryCommentReactionsResponse>> QueryCommentReactionsAsync(string CommentID,
            QueryCommentReactionsRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["comment_id"] = CommentID,
            };
            
            var result = await MakeRequestAsync<QueryCommentReactionsRequest, QueryCommentReactionsResponse>("POST",
                "/api/v2/feeds/comments/{comment_id}/reactions/query",null,request,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Deletes a reaction from a comment
        /// 
        public async Task<StreamResponse<DeleteCommentReactionResponse>> DeleteCommentReactionAsync(string CommentID, string Type,
            DeleteCommentReactionRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["comment_id"] = CommentID,
                ["type"] = Type,
            };
            
            var result = await MakeRequestAsync<object, DeleteCommentReactionResponse>("DELETE",
                "/api/v2/feeds/comments/{comment_id}/reactions/{type}",null,null,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Retrieve a threaded list of replies for a single comment, with configurable depth, sorting, and pagination
        /// 
        public async Task<StreamResponse<GetCommentRepliesResponse>> GetCommentRepliesAsync(string CommentID,
            GetCommentRepliesRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["comment_id"] = CommentID,
            };
            var queryParams = ExtractQueryParams(request);
            
            var result = await MakeRequestAsync<object, GetCommentRepliesResponse>("GET",
                "/api/v2/feeds/comments/{comment_id}/replies",queryParams,null,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Delete a single feed by its ID
        /// 
        public async Task<StreamResponse<DeleteFeedResponse>> DeleteFeedAsync(string FeedGroupID, string FeedID,
            DeleteFeedRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["feed_group_id"] = FeedGroupID,
                ["feed_id"] = FeedID,
            };
            var queryParams = ExtractQueryParams(request);
            
            var result = await MakeRequestAsync<object, DeleteFeedResponse>("DELETE",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}",queryParams,null,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Create a single feed for a given feed group
        /// 
        public async Task<StreamResponse<GetOrCreateFeedResponse>> GetOrCreateFeedAsync(string FeedGroupID, string FeedID,
            GetOrCreateFeedRequest request,
            CancellationToken cancellationToken = default)
        {
            Console.WriteLine("hvgbhknb vnjknb nkj");

            var pathParams = new Dictionary<string, string>
            {
                ["feed_group_id"] = FeedGroupID,
                ["feed_id"] = FeedID,
            };
            var queryParams = ExtractQueryParams(request);
            
            var result = await MakeRequestAsync<GetOrCreateFeedRequest, GetOrCreateFeedResponse>("POST",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}",queryParams,request,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Update an existing feed
        /// 
        public async Task<StreamResponse<UpdateFeedResponse>> UpdateFeedAsync(string FeedGroupID, string FeedID,
            UpdateFeedRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["feed_group_id"] = FeedGroupID,
                ["feed_id"] = FeedID,
            };
            
            var result = await MakeRequestAsync<UpdateFeedRequest, UpdateFeedResponse>("PUT",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}",null,request,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Mark activities as read/seen/watched. Can mark by timestamp (seen), activity IDs (read), or all as read.
        /// 
        public async Task<StreamResponse<Response>> MarkActivityAsync(string FeedGroupID, string FeedID,
            MarkActivityRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["feed_group_id"] = FeedGroupID,
                ["feed_id"] = FeedID,
            };
            
            var result = await MakeRequestAsync<MarkActivityRequest, Response>("POST",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/activities/mark/batch",null,request,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Unpin an activity from a feed. This removes the pin, so the activity will no longer be displayed at the top of the feed.
        /// 
        public async Task<StreamResponse<UnpinActivityResponse>> UnpinActivityAsync(string FeedGroupID, string FeedID, string ActivityID,
            UnpinActivityRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["feed_group_id"] = FeedGroupID,
                ["feed_id"] = FeedID,
                ["activity_id"] = ActivityID,
            };
            
            var result = await MakeRequestAsync<object, UnpinActivityResponse>("DELETE",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/activities/{activity_id}/pin",null,null,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Pin an activity to a feed. Pinned activities are typically displayed at the top of a feed.
        /// 
        public async Task<StreamResponse<PinActivityResponse>> PinActivityAsync(string FeedGroupID, string FeedID, string ActivityID,
            PinActivityRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["feed_group_id"] = FeedGroupID,
                ["feed_id"] = FeedID,
                ["activity_id"] = ActivityID,
            };
            
            var result = await MakeRequestAsync<PinActivityRequest, PinActivityResponse>("POST",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/activities/{activity_id}/pin",null,request,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Add, remove, or set members for a feed
        /// 
        public async Task<StreamResponse<UpdateFeedMembersResponse>> UpdateFeedMembersAsync(string FeedGroupID, string FeedID,
            UpdateFeedMembersRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["feed_group_id"] = FeedGroupID,
                ["feed_id"] = FeedID,
            };
            
            var result = await MakeRequestAsync<UpdateFeedMembersRequest, UpdateFeedMembersResponse>("PATCH",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members",null,request,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Accepts a pending feed member request
        /// 
        public async Task<StreamResponse<AcceptFeedMemberInviteResponse>> AcceptFeedMemberInviteAsync(string FeedID, string FeedGroupID,
            AcceptFeedMemberInviteRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["feed_id"] = FeedID,
                ["feed_group_id"] = FeedGroupID,
            };
            
            var result = await MakeRequestAsync<AcceptFeedMemberInviteRequest, AcceptFeedMemberInviteResponse>("POST",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members/accept",null,request,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Query feed members based on filters with pagination and sorting options
        /// 
        public async Task<StreamResponse<QueryFeedMembersResponse>> QueryFeedMembersAsync(string FeedGroupID, string FeedID,
            QueryFeedMembersRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["feed_group_id"] = FeedGroupID,
                ["feed_id"] = FeedID,
            };
            
            var result = await MakeRequestAsync<QueryFeedMembersRequest, QueryFeedMembersResponse>("POST",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members/query",null,request,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Rejects a pending feed member request
        /// 
        public async Task<StreamResponse<RejectFeedMemberInviteResponse>> RejectFeedMemberInviteAsync(string FeedGroupID, string FeedID,
            RejectFeedMemberInviteRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["feed_group_id"] = FeedGroupID,
                ["feed_id"] = FeedID,
            };
            
            var result = await MakeRequestAsync<RejectFeedMemberInviteRequest, RejectFeedMemberInviteResponse>("POST",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members/reject",null,request,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Call this Method to stop receiving feed events
        /// 
        public async Task<StreamResponse<Response>> StopWatchingFeedAsync(string FeedGroupID, string FeedID,
            StopWatchingFeedRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["feed_group_id"] = FeedGroupID,
                ["feed_id"] = FeedID,
            };
            var queryParams = ExtractQueryParams(request);
            
            var result = await MakeRequestAsync<object, Response>("DELETE",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/watch",queryParams,null,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Get follow suggestions for a feed group
        /// 
        public async Task<StreamResponse<GetFollowSuggestionsResponse>> GetFollowSuggestionsAsync(string FeedGroupID,
            GetFollowSuggestionsRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["feed_group_id"] = FeedGroupID,
            };
            var queryParams = ExtractQueryParams(request);
            
            var result = await MakeRequestAsync<object, GetFollowSuggestionsResponse>("GET",
                "/api/v2/feeds/feed_groups/{feed_group_id}/follow_suggestions",queryParams,null,pathParams,
                cancellationToken);
                
            return result;
        }

        /// Create multiple feeds at once for a given feed group
        /// 
        public async Task<StreamResponse<CreateFeedsBatchResponse>> CreateFeedsBatchAsync(
            CreateFeedsBatchRequest request,
            CancellationToken cancellationToken = default)
        {
            
            var result = await MakeRequestAsync<CreateFeedsBatchRequest, CreateFeedsBatchResponse>("POST",
                "/api/v2/feeds/feeds/batch",null,request,null,
                cancellationToken);
                
            return result;
        }

        /// Query feeds with filter query
        /// 
        public async Task<StreamResponse<QueryFeedsResponse>> FeedsQueryFeedsAsync(
            FeedsQueryFeedsRequest request,
            CancellationToken cancellationToken = default)
        {
            var queryParams = ExtractQueryParams(request);
            
            var result = await MakeRequestAsync<FeedsQueryFeedsRequest, QueryFeedsResponse>("POST",
                "/api/v2/feeds/feeds/query",queryParams,request,null,
                cancellationToken);
                
            return result;
        }

        /// Updates a follow's custom data, push preference, and follower role. Source owner can update custom data and push preference. Target owner can update follower role.
        /// 
        public async Task<StreamResponse<UpdateFollowResponse>> UpdateFollowAsync(
            UpdateFollowRequest request,
            CancellationToken cancellationToken = default)
        {
            
            var result = await MakeRequestAsync<UpdateFollowRequest, UpdateFollowResponse>("PATCH",
                "/api/v2/feeds/follows",null,request,null,
                cancellationToken);
                
            return result;
        }

        /// Creates a follow and broadcasts FollowAddedEvent
        /// 
        public async Task<StreamResponse<SingleFollowResponse>> FollowAsync(
            FollowRequest request,
            CancellationToken cancellationToken = default)
        {
            
            var result = await MakeRequestAsync<FollowRequest, SingleFollowResponse>("POST",
                "/api/v2/feeds/follows",null,request,null,
                cancellationToken);
                
            return result;
        }

        /// Accepts a pending follow request
        /// 
        public async Task<StreamResponse<AcceptFollowResponse>> AcceptFollowAsync(
            AcceptFollowRequest request,
            CancellationToken cancellationToken = default)
        {
            
            var result = await MakeRequestAsync<AcceptFollowRequest, AcceptFollowResponse>("POST",
                "/api/v2/feeds/follows/accept",null,request,null,
                cancellationToken);
                
            return result;
        }

        /// Creates multiple follows at once and broadcasts FollowAddedEvent for each follow
        /// 
        public async Task<StreamResponse<FollowBatchResponse>> FollowBatchAsync(
            FollowBatchRequest request,
            CancellationToken cancellationToken = default)
        {
            
            var result = await MakeRequestAsync<FollowBatchRequest, FollowBatchResponse>("POST",
                "/api/v2/feeds/follows/batch",null,request,null,
                cancellationToken);
                
            return result;
        }

        /// Query follows based on filters with pagination and sorting options
        /// 
        public async Task<StreamResponse<QueryFollowsResponse>> QueryFollowsAsync(
            QueryFollowsRequest request,
            CancellationToken cancellationToken = default)
        {
            
            var result = await MakeRequestAsync<QueryFollowsRequest, QueryFollowsResponse>("POST",
                "/api/v2/feeds/follows/query",null,request,null,
                cancellationToken);
                
            return result;
        }

        /// Rejects a pending follow request
        /// 
        public async Task<StreamResponse<RejectFollowResponse>> RejectFollowAsync(
            RejectFollowRequest request,
            CancellationToken cancellationToken = default)
        {
            
            var result = await MakeRequestAsync<RejectFollowRequest, RejectFollowResponse>("POST",
                "/api/v2/feeds/follows/reject",null,request,null,
                cancellationToken);
                
            return result;
        }

        /// Removes a follow and broadcasts FollowRemovedEvent
        /// 
        public async Task<StreamResponse<UnfollowResponse>> UnfollowAsync(string Source, string Target,
            UnfollowRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["source"] = Source,
                ["target"] = Target,
            };
            
            var result = await MakeRequestAsync<object, UnfollowResponse>("DELETE",
                "/api/v2/feeds/follows/{source}/{target}",null,null,pathParams,
                cancellationToken);
                
            return result;
        }
    }
}