// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.
using GetStream.Requests;
using GetStream.Models;

namespace GetStream
{
    public class Client : BaseClient
    {
        public Client(string apiKey, string apiSecret,
            string baseUrl = "https://chat.stream-io-api.com") : base(apiKey, apiSecret, baseUrl)
        {
            this.ApiKey = apiKey;
            this.ApiSecret = apiSecret;
            this.BaseUrl = baseUrl;
        }

        private Dictionary<string, string> ExtractQueryParams(object request)
        {
            if (request == null)
                return new Dictionary<string, string>();
            
            var queryParams = new Dictionary<string, string>();
            var properties = request.GetType().GetProperties();
            
            foreach (var prop in properties)
            {
                var value = prop.GetValue(request);
                if (value != null)
                {
                    queryParams[prop.Name.ToLower()] = value.ToString();
                }
            }
            
            return queryParams;
        }
        public async Task<StreamResponse<GetApplicationResponse>> GetAppAsync(object request = null,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<object, GetApplicationResponse>(
                "GET",
                "/api/v2/app",null,null,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<Response>> UpdateAppAsync(UpdateAppRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<UpdateAppRequest, Response>(
                "PATCH",
                "/api/v2/app",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<ListBlockListResponse>> ListBlockListsAsync(object request = null,
            CancellationToken cancellationToken = default)
        {
            var queryParams = ExtractQueryParams(request);

            var result = await MakeRequestAsync<object, ListBlockListResponse>(
                "GET",
                "/api/v2/blocklists",queryParams,null,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<CreateBlockListResponse>> CreateBlockListAsync(CreateBlockListRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<CreateBlockListRequest, CreateBlockListResponse>(
                "POST",
                "/api/v2/blocklists",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<Response>> DeleteBlockListAsync(string Name,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["name"] = Name,
            };
            var queryParams = ExtractQueryParams(request);

            var result = await MakeRequestAsync<object, Response>(
                "DELETE",
                "/api/v2/blocklists/{name}",queryParams,null,pathParams,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<GetBlockListResponse>> GetBlockListAsync(string Name,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["name"] = Name,
            };
            var queryParams = ExtractQueryParams(request);

            var result = await MakeRequestAsync<object, GetBlockListResponse>(
                "GET",
                "/api/v2/blocklists/{name}",queryParams,null,pathParams,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<UpdateBlockListResponse>> UpdateBlockListAsync(string Name,UpdateBlockListRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["name"] = Name,
            };

            var result = await MakeRequestAsync<UpdateBlockListRequest, UpdateBlockListResponse>(
                "PUT",
                "/api/v2/blocklists/{name}",null,request,pathParams,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<CheckPushResponse>> CheckPushAsync(CheckPushRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<CheckPushRequest, CheckPushResponse>(
                "POST",
                "/api/v2/check_push",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<CheckSNSResponse>> CheckSNSAsync(CheckSNSRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<CheckSNSRequest, CheckSNSResponse>(
                "POST",
                "/api/v2/check_sns",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<CheckSQSResponse>> CheckSQSAsync(CheckSQSRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<CheckSQSRequest, CheckSQSResponse>(
                "POST",
                "/api/v2/check_sqs",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<Response>> DeleteDeviceAsync(object request = null,
            CancellationToken cancellationToken = default)
        {
            var queryParams = ExtractQueryParams(request);

            var result = await MakeRequestAsync<object, Response>(
                "DELETE",
                "/api/v2/devices",queryParams,null,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<ListDevicesResponse>> ListDevicesAsync(object request = null,
            CancellationToken cancellationToken = default)
        {
            var queryParams = ExtractQueryParams(request);

            var result = await MakeRequestAsync<object, ListDevicesResponse>(
                "GET",
                "/api/v2/devices",queryParams,null,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<Response>> CreateDeviceAsync(CreateDeviceRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<CreateDeviceRequest, Response>(
                "POST",
                "/api/v2/devices",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<ExportUsersResponse>> ExportUsersAsync(ExportUsersRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<ExportUsersRequest, ExportUsersResponse>(
                "POST",
                "/api/v2/export/users",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<ListExternalStorageResponse>> ListExternalStorageAsync(object request = null,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<object, ListExternalStorageResponse>(
                "GET",
                "/api/v2/external_storage",null,null,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<CreateExternalStorageResponse>> CreateExternalStorageAsync(CreateExternalStorageRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<CreateExternalStorageRequest, CreateExternalStorageResponse>(
                "POST",
                "/api/v2/external_storage",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<DeleteExternalStorageResponse>> DeleteExternalStorageAsync(string Name,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["name"] = Name,
            };

            var result = await MakeRequestAsync<object, DeleteExternalStorageResponse>(
                "DELETE",
                "/api/v2/external_storage/{name}",null,null,pathParams,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<UpdateExternalStorageResponse>> UpdateExternalStorageAsync(string Name,UpdateExternalStorageRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["name"] = Name,
            };

            var result = await MakeRequestAsync<UpdateExternalStorageRequest, UpdateExternalStorageResponse>(
                "PUT",
                "/api/v2/external_storage/{name}",null,request,pathParams,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<CheckExternalStorageResponse>> CheckExternalStorageAsync(string Name,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["name"] = Name,
            };

            var result = await MakeRequestAsync<object, CheckExternalStorageResponse>(
                "GET",
                "/api/v2/external_storage/{name}/check",null,null,pathParams,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<CreateGuestResponse>> CreateGuestAsync(CreateGuestRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<CreateGuestRequest, CreateGuestResponse>(
                "POST",
                "/api/v2/guest",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<CreateImportURLResponse>> CreateImportURLAsync(CreateImportURLRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<CreateImportURLRequest, CreateImportURLResponse>(
                "POST",
                "/api/v2/import_urls",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<ListImportsResponse>> ListImportsAsync(object request = null,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<object, ListImportsResponse>(
                "GET",
                "/api/v2/imports",null,null,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<CreateImportResponse>> CreateImportAsync(CreateImportRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<CreateImportRequest, CreateImportResponse>(
                "POST",
                "/api/v2/imports",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<GetImportResponse>> GetImportAsync(string ID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = ID,
            };

            var result = await MakeRequestAsync<object, GetImportResponse>(
                "GET",
                "/api/v2/imports/{id}",null,null,pathParams,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<GetOGResponse>> GetOGAsync(object request = null,
            CancellationToken cancellationToken = default)
        {
            var queryParams = ExtractQueryParams(request);

            var result = await MakeRequestAsync<object, GetOGResponse>(
                "GET",
                "/api/v2/og",queryParams,null,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<ListPermissionsResponse>> ListPermissionsAsync(object request = null,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<object, ListPermissionsResponse>(
                "GET",
                "/api/v2/permissions",null,null,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<GetCustomPermissionResponse>> GetPermissionAsync(string ID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = ID,
            };

            var result = await MakeRequestAsync<object, GetCustomPermissionResponse>(
                "GET",
                "/api/v2/permissions/{id}",null,null,pathParams,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<PollResponse>> CreatePollAsync(CreatePollRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<CreatePollRequest, PollResponse>(
                "POST",
                "/api/v2/polls",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<PollResponse>> UpdatePollAsync(UpdatePollRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<UpdatePollRequest, PollResponse>(
                "PUT",
                "/api/v2/polls",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<QueryPollsResponse>> QueryPollsAsync(QueryPollsRequest request,
            CancellationToken cancellationToken = default)
        {
            var queryParams = ExtractQueryParams(request);

            var result = await MakeRequestAsync<QueryPollsRequest, QueryPollsResponse>(
                "POST",
                "/api/v2/polls/query",queryParams,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<Response>> DeletePollAsync(string PollID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["poll_id"] = PollID,
            };
            var queryParams = ExtractQueryParams(request);

            var result = await MakeRequestAsync<object, Response>(
                "DELETE",
                "/api/v2/polls/{poll_id}",queryParams,null,pathParams,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<PollResponse>> GetPollAsync(string PollID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["poll_id"] = PollID,
            };
            var queryParams = ExtractQueryParams(request);

            var result = await MakeRequestAsync<object, PollResponse>(
                "GET",
                "/api/v2/polls/{poll_id}",queryParams,null,pathParams,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<PollResponse>> UpdatePollPartialAsync(string PollID,UpdatePollPartialRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["poll_id"] = PollID,
            };

            var result = await MakeRequestAsync<UpdatePollPartialRequest, PollResponse>(
                "PATCH",
                "/api/v2/polls/{poll_id}",null,request,pathParams,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<PollOptionResponse>> CreatePollOptionAsync(string PollID,CreatePollOptionRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["poll_id"] = PollID,
            };

            var result = await MakeRequestAsync<CreatePollOptionRequest, PollOptionResponse>(
                "POST",
                "/api/v2/polls/{poll_id}/options",null,request,pathParams,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<PollOptionResponse>> UpdatePollOptionAsync(string PollID,UpdatePollOptionRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["poll_id"] = PollID,
            };

            var result = await MakeRequestAsync<UpdatePollOptionRequest, PollOptionResponse>(
                "PUT",
                "/api/v2/polls/{poll_id}/options",null,request,pathParams,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<Response>> DeletePollOptionAsync(string PollID, string OptionID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["poll_id"] = PollID,
                ["option_id"] = OptionID,
            };
            var queryParams = ExtractQueryParams(request);

            var result = await MakeRequestAsync<object, Response>(
                "DELETE",
                "/api/v2/polls/{poll_id}/options/{option_id}",queryParams,null,pathParams,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<PollOptionResponse>> GetPollOptionAsync(string PollID, string OptionID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["poll_id"] = PollID,
                ["option_id"] = OptionID,
            };
            var queryParams = ExtractQueryParams(request);

            var result = await MakeRequestAsync<object, PollOptionResponse>(
                "GET",
                "/api/v2/polls/{poll_id}/options/{option_id}",queryParams,null,pathParams,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<PollVotesResponse>> QueryPollVotesAsync(string PollID,QueryPollVotesRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["poll_id"] = PollID,
            };
            var queryParams = ExtractQueryParams(request);

            var result = await MakeRequestAsync<QueryPollVotesRequest, PollVotesResponse>(
                "POST",
                "/api/v2/polls/{poll_id}/votes",queryParams,request,pathParams,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<ListPushProvidersResponse>> ListPushProvidersAsync(object request = null,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<object, ListPushProvidersResponse>(
                "GET",
                "/api/v2/push_providers",null,null,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<UpsertPushProviderResponse>> UpsertPushProviderAsync(UpsertPushProviderRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<UpsertPushProviderRequest, UpsertPushProviderResponse>(
                "POST",
                "/api/v2/push_providers",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<Response>> DeletePushProviderAsync(string Type, string Name,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["type"] = Type,
                ["name"] = Name,
            };

            var result = await MakeRequestAsync<object, Response>(
                "DELETE",
                "/api/v2/push_providers/{type}/{name}",null,null,pathParams,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<GetRateLimitsResponse>> GetRateLimitsAsync(object request = null,
            CancellationToken cancellationToken = default)
        {
            var queryParams = ExtractQueryParams(request);

            var result = await MakeRequestAsync<object, GetRateLimitsResponse>(
                "GET",
                "/api/v2/rate_limits",queryParams,null,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<ListRolesResponse>> ListRolesAsync(object request = null,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<object, ListRolesResponse>(
                "GET",
                "/api/v2/roles",null,null,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<CreateRoleResponse>> CreateRoleAsync(CreateRoleRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<CreateRoleRequest, CreateRoleResponse>(
                "POST",
                "/api/v2/roles",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<Response>> DeleteRoleAsync(string Name,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["name"] = Name,
            };

            var result = await MakeRequestAsync<object, Response>(
                "DELETE",
                "/api/v2/roles/{name}",null,null,pathParams,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<GetTaskResponse>> GetTaskAsync(string ID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = ID,
            };

            var result = await MakeRequestAsync<object, GetTaskResponse>(
                "GET",
                "/api/v2/tasks/{id}",null,null,pathParams,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<Response>> DeleteFileAsync(object request = null,
            CancellationToken cancellationToken = default)
        {
            var queryParams = ExtractQueryParams(request);

            var result = await MakeRequestAsync<object, Response>(
                "DELETE",
                "/api/v2/uploads/file",queryParams,null,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<FileUploadResponse>> FileUploadAsync(FileUploadRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<FileUploadRequest, FileUploadResponse>(
                "POST",
                "/api/v2/uploads/file",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<Response>> DeleteImageAsync(object request = null,
            CancellationToken cancellationToken = default)
        {
            var queryParams = ExtractQueryParams(request);

            var result = await MakeRequestAsync<object, Response>(
                "DELETE",
                "/api/v2/uploads/image",queryParams,null,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<ImageUploadResponse>> ImageUploadAsync(ImageUploadRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<ImageUploadRequest, ImageUploadResponse>(
                "POST",
                "/api/v2/uploads/image",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<QueryUsersResponse>> QueryUsersAsync(object request = null,
            CancellationToken cancellationToken = default)
        {
            var queryParams = ExtractQueryParams(request);

            var result = await MakeRequestAsync<object, QueryUsersResponse>(
                "GET",
                "/api/v2/users",queryParams,null,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<UpdateUsersResponse>> UpdateUsersPartialAsync(UpdateUsersPartialRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<UpdateUsersPartialRequest, UpdateUsersResponse>(
                "PATCH",
                "/api/v2/users",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<UpdateUsersResponse>> UpdateUsersAsync(UpdateUsersRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<UpdateUsersRequest, UpdateUsersResponse>(
                "POST",
                "/api/v2/users",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<GetBlockedUsersResponse>> GetBlockedUsersAsync(object request = null,
            CancellationToken cancellationToken = default)
        {
            var queryParams = ExtractQueryParams(request);

            var result = await MakeRequestAsync<object, GetBlockedUsersResponse>(
                "GET",
                "/api/v2/users/block",queryParams,null,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<BlockUsersResponse>> BlockUsersAsync(BlockUsersRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<BlockUsersRequest, BlockUsersResponse>(
                "POST",
                "/api/v2/users/block",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<DeactivateUsersResponse>> DeactivateUsersAsync(DeactivateUsersRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<DeactivateUsersRequest, DeactivateUsersResponse>(
                "POST",
                "/api/v2/users/deactivate",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<DeleteUsersResponse>> DeleteUsersAsync(DeleteUsersRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<DeleteUsersRequest, DeleteUsersResponse>(
                "POST",
                "/api/v2/users/delete",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<SharedLocationsResponse>> GetUserLiveLocationsAsync(object request = null,
            CancellationToken cancellationToken = default)
        {
            var queryParams = ExtractQueryParams(request);

            var result = await MakeRequestAsync<object, SharedLocationsResponse>(
                "GET",
                "/api/v2/users/live_locations",queryParams,null,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<SharedLocationResponse>> UpdateLiveLocationAsync(UpdateLiveLocationRequest request,
            CancellationToken cancellationToken = default)
        {
            var queryParams = ExtractQueryParams(request);

            var result = await MakeRequestAsync<UpdateLiveLocationRequest, SharedLocationResponse>(
                "PUT",
                "/api/v2/users/live_locations",queryParams,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<ReactivateUsersResponse>> ReactivateUsersAsync(ReactivateUsersRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<ReactivateUsersRequest, ReactivateUsersResponse>(
                "POST",
                "/api/v2/users/reactivate",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<Response>> RestoreUsersAsync(RestoreUsersRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<RestoreUsersRequest, Response>(
                "POST",
                "/api/v2/users/restore",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<UnblockUsersResponse>> UnblockUsersAsync(UnblockUsersRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await MakeRequestAsync<UnblockUsersRequest, UnblockUsersResponse>(
                "POST",
                "/api/v2/users/unblock",null,request,null,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<DeactivateUserResponse>> DeactivateUserAsync(string UserID,DeactivateUserRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["user_id"] = UserID,
            };

            var result = await MakeRequestAsync<DeactivateUserRequest, DeactivateUserResponse>(
                "POST",
                "/api/v2/users/{user_id}/deactivate",null,request,pathParams,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<ExportUserResponse>> ExportUserAsync(string UserID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["user_id"] = UserID,
            };

            var result = await MakeRequestAsync<object, ExportUserResponse>(
                "GET",
                "/api/v2/users/{user_id}/export",null,null,pathParams,
                cancellationToken);
                
            return result;
        }
        public async Task<StreamResponse<ReactivateUserResponse>> ReactivateUserAsync(string UserID,ReactivateUserRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["user_id"] = UserID,
            };

            var result = await MakeRequestAsync<ReactivateUserRequest, ReactivateUserResponse>(
                "POST",
                "/api/v2/users/{user_id}/reactivate",null,request,pathParams,
                cancellationToken);
                
            return result;
        }
            }
        }