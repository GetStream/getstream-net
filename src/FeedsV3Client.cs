// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.
using GetStream.Requests;
using GetStream.Models;

namespace GetStream
{
    public class FeedsV3Client
    {
        private readonly IClient _client;

        /// <summary>
        /// Create FeedsV3Client using credentials from environment variables or .env file
        /// </summary>
        public FeedsV3Client()
        {
            var client = new StreamClient();
            _client = client;
        }

        public FeedsV3Client(IClient client)
        {
            _client = client ?? throw new ArgumentNullException(nameof(client));
        }
        public FeedsV3Client(string apiKey, string apiSecret)
        {
            var client = new StreamClient(apiKey, apiSecret);
            _client = client;
        }
        public Feed Feed(string feedGroup, string feedId)
        {
            return new Feed(this, feedGroup, feedId);
        }
        private Dictionary<string, string> ExtractQueryParams(object request)
        {
            if (request == null)
                return new Dictionary<string, string>();
            var queryParams = new Dictionary<string, string>();
            var properties = request.GetType().GetProperties();
            foreach (var prop in properties)
            {
                var value = prop.GetValue(request);
                if (value != null)
                {
                    queryParams[prop.Name.ToLower()] = value.ToString();
                }
            }

            return queryParams;
        }
        public async Task<StreamResponse<AddActivityResponse>> AddActivityAsync(AddActivityRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<AddActivityRequest, AddActivityResponse>(
                "POST",
                "/api/v2/feeds/activities",null,request,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<UpsertActivitiesResponse>> UpsertActivitiesAsync(UpsertActivitiesRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<UpsertActivitiesRequest, UpsertActivitiesResponse>(
                "POST",
                "/api/v2/feeds/activities/batch",null,request,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<DeleteActivitiesResponse>> DeleteActivitiesAsync(DeleteActivitiesRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<DeleteActivitiesRequest, DeleteActivitiesResponse>(
                "POST",
                "/api/v2/feeds/activities/delete",null,request,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<QueryActivitiesResponse>> QueryActivitiesAsync(QueryActivitiesRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<QueryActivitiesRequest, QueryActivitiesResponse>(
                "POST",
                "/api/v2/feeds/activities/query",null,request,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<DeleteBookmarkResponse>> DeleteBookmarkAsync(string ActivityID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["activity_id"] = ActivityID,
            };
            var queryParams = ExtractQueryParams(request);

            var result = await _client.MakeRequestAsync<object, DeleteBookmarkResponse>(
                "DELETE",
                "/api/v2/feeds/activities/{activity_id}/bookmarks",queryParams,null,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<UpdateBookmarkResponse>> UpdateBookmarkAsync(string ActivityID,UpdateBookmarkRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["activity_id"] = ActivityID,
            };

            var result = await _client.MakeRequestAsync<UpdateBookmarkRequest, UpdateBookmarkResponse>(
                "PATCH",
                "/api/v2/feeds/activities/{activity_id}/bookmarks",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<AddBookmarkResponse>> AddBookmarkAsync(string ActivityID,AddBookmarkRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["activity_id"] = ActivityID,
            };

            var result = await _client.MakeRequestAsync<AddBookmarkRequest, AddBookmarkResponse>(
                "POST",
                "/api/v2/feeds/activities/{activity_id}/bookmarks",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<ActivityFeedbackResponse>> ActivityFeedbackAsync(string ActivityID,ActivityFeedbackRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["activity_id"] = ActivityID,
            };

            var result = await _client.MakeRequestAsync<ActivityFeedbackRequest, ActivityFeedbackResponse>(
                "POST",
                "/api/v2/feeds/activities/{activity_id}/feedback",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<PollVoteResponse>> CastPollVoteAsync(string ActivityID, string PollID,CastPollVoteRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["activity_id"] = ActivityID,
                ["poll_id"] = PollID,
            };

            var result = await _client.MakeRequestAsync<CastPollVoteRequest, PollVoteResponse>(
                "POST",
                "/api/v2/feeds/activities/{activity_id}/polls/{poll_id}/vote",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<PollVoteResponse>> DeletePollVoteAsync(string ActivityID, string PollID, string VoteID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["activity_id"] = ActivityID,
                ["poll_id"] = PollID,
                ["vote_id"] = VoteID,
            };
            var queryParams = ExtractQueryParams(request);

            var result = await _client.MakeRequestAsync<object, PollVoteResponse>(
                "DELETE",
                "/api/v2/feeds/activities/{activity_id}/polls/{poll_id}/vote/{vote_id}",queryParams,null,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<AddReactionResponse>> AddReactionAsync(string ActivityID,AddReactionRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["activity_id"] = ActivityID,
            };

            var result = await _client.MakeRequestAsync<AddReactionRequest, AddReactionResponse>(
                "POST",
                "/api/v2/feeds/activities/{activity_id}/reactions",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<QueryActivityReactionsResponse>> QueryActivityReactionsAsync(string ActivityID,QueryActivityReactionsRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["activity_id"] = ActivityID,
            };

            var result = await _client.MakeRequestAsync<QueryActivityReactionsRequest, QueryActivityReactionsResponse>(
                "POST",
                "/api/v2/feeds/activities/{activity_id}/reactions/query",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<DeleteActivityReactionResponse>> DeleteActivityReactionAsync(string ActivityID, string Type,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["activity_id"] = ActivityID,
                ["type"] = Type,
            };
            var queryParams = ExtractQueryParams(request);

            var result = await _client.MakeRequestAsync<object, DeleteActivityReactionResponse>(
                "DELETE",
                "/api/v2/feeds/activities/{activity_id}/reactions/{type}",queryParams,null,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<DeleteActivityResponse>> DeleteActivityAsync(string ID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = ID,
            };
            var queryParams = ExtractQueryParams(request);

            var result = await _client.MakeRequestAsync<object, DeleteActivityResponse>(
                "DELETE",
                "/api/v2/feeds/activities/{id}",queryParams,null,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<GetActivityResponse>> GetActivityAsync(string ID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = ID,
            };

            var result = await _client.MakeRequestAsync<object, GetActivityResponse>(
                "GET",
                "/api/v2/feeds/activities/{id}",null,null,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<UpdateActivityPartialResponse>> UpdateActivityPartialAsync(string ID,UpdateActivityPartialRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = ID,
            };

            var result = await _client.MakeRequestAsync<UpdateActivityPartialRequest, UpdateActivityPartialResponse>(
                "PATCH",
                "/api/v2/feeds/activities/{id}",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<UpdateActivityResponse>> UpdateActivityAsync(string ID,UpdateActivityRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = ID,
            };

            var result = await _client.MakeRequestAsync<UpdateActivityRequest, UpdateActivityResponse>(
                "PUT",
                "/api/v2/feeds/activities/{id}",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<QueryBookmarkFoldersResponse>> QueryBookmarkFoldersAsync(QueryBookmarkFoldersRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<QueryBookmarkFoldersRequest, QueryBookmarkFoldersResponse>(
                "POST",
                "/api/v2/feeds/bookmark_folders/query",null,request,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<DeleteBookmarkFolderResponse>> DeleteBookmarkFolderAsync(string FolderID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["folder_id"] = FolderID,
            };

            var result = await _client.MakeRequestAsync<object, DeleteBookmarkFolderResponse>(
                "DELETE",
                "/api/v2/feeds/bookmark_folders/{folder_id}",null,null,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<UpdateBookmarkFolderResponse>> UpdateBookmarkFolderAsync(string FolderID,UpdateBookmarkFolderRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["folder_id"] = FolderID,
            };

            var result = await _client.MakeRequestAsync<UpdateBookmarkFolderRequest, UpdateBookmarkFolderResponse>(
                "PATCH",
                "/api/v2/feeds/bookmark_folders/{folder_id}",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<QueryBookmarksResponse>> QueryBookmarksAsync(QueryBookmarksRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<QueryBookmarksRequest, QueryBookmarksResponse>(
                "POST",
                "/api/v2/feeds/bookmarks/query",null,request,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<GetCommentsResponse>> GetCommentsAsync(object request = null,
            CancellationToken cancellationToken = default)
        {
            var queryParams = ExtractQueryParams(request);

            var result = await _client.MakeRequestAsync<object, GetCommentsResponse>(
                "GET",
                "/api/v2/feeds/comments",queryParams,null,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<AddCommentResponse>> AddCommentAsync(AddCommentRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<AddCommentRequest, AddCommentResponse>(
                "POST",
                "/api/v2/feeds/comments",null,request,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<AddCommentsBatchResponse>> AddCommentsBatchAsync(AddCommentsBatchRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<AddCommentsBatchRequest, AddCommentsBatchResponse>(
                "POST",
                "/api/v2/feeds/comments/batch",null,request,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<QueryCommentsResponse>> QueryCommentsAsync(QueryCommentsRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<QueryCommentsRequest, QueryCommentsResponse>(
                "POST",
                "/api/v2/feeds/comments/query",null,request,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<DeleteCommentResponse>> DeleteCommentAsync(string ID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = ID,
            };
            var queryParams = ExtractQueryParams(request);

            var result = await _client.MakeRequestAsync<object, DeleteCommentResponse>(
                "DELETE",
                "/api/v2/feeds/comments/{id}",queryParams,null,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<GetCommentResponse>> GetCommentAsync(string ID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = ID,
            };

            var result = await _client.MakeRequestAsync<object, GetCommentResponse>(
                "GET",
                "/api/v2/feeds/comments/{id}",null,null,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<UpdateCommentResponse>> UpdateCommentAsync(string ID,UpdateCommentRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = ID,
            };

            var result = await _client.MakeRequestAsync<UpdateCommentRequest, UpdateCommentResponse>(
                "PATCH",
                "/api/v2/feeds/comments/{id}",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<AddCommentReactionResponse>> AddCommentReactionAsync(string ID,AddCommentReactionRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = ID,
            };

            var result = await _client.MakeRequestAsync<AddCommentReactionRequest, AddCommentReactionResponse>(
                "POST",
                "/api/v2/feeds/comments/{id}/reactions",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<QueryCommentReactionsResponse>> QueryCommentReactionsAsync(string ID,QueryCommentReactionsRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = ID,
            };

            var result = await _client.MakeRequestAsync<QueryCommentReactionsRequest, QueryCommentReactionsResponse>(
                "POST",
                "/api/v2/feeds/comments/{id}/reactions/query",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<DeleteCommentReactionResponse>> DeleteCommentReactionAsync(string ID, string Type,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = ID,
                ["type"] = Type,
            };
            var queryParams = ExtractQueryParams(request);

            var result = await _client.MakeRequestAsync<object, DeleteCommentReactionResponse>(
                "DELETE",
                "/api/v2/feeds/comments/{id}/reactions/{type}",queryParams,null,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<GetCommentRepliesResponse>> GetCommentRepliesAsync(string ID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = ID,
            };
            var queryParams = ExtractQueryParams(request);

            var result = await _client.MakeRequestAsync<object, GetCommentRepliesResponse>(
                "GET",
                "/api/v2/feeds/comments/{id}/replies",queryParams,null,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<ListFeedGroupsResponse>> ListFeedGroupsAsync(object request = null,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<object, ListFeedGroupsResponse>(
                "GET",
                "/api/v2/feeds/feed_groups",null,null,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<CreateFeedGroupResponse>> CreateFeedGroupAsync(CreateFeedGroupRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<CreateFeedGroupRequest, CreateFeedGroupResponse>(
                "POST",
                "/api/v2/feeds/feed_groups",null,request,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<DeleteFeedResponse>> DeleteFeedAsync(string FeedGroupID, string FeedID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["feed_group_id"] = FeedGroupID,
                ["feed_id"] = FeedID,
            };
            var queryParams = ExtractQueryParams(request);

            var result = await _client.MakeRequestAsync<object, DeleteFeedResponse>(
                "DELETE",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}",queryParams,null,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<GetOrCreateFeedResponse>> GetOrCreateFeedAsync(string FeedGroupID, string FeedID,GetOrCreateFeedRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["feed_group_id"] = FeedGroupID,
                ["feed_id"] = FeedID,
            };

            var result = await _client.MakeRequestAsync<GetOrCreateFeedRequest, GetOrCreateFeedResponse>(
                "POST",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<UpdateFeedResponse>> UpdateFeedAsync(string FeedGroupID, string FeedID,UpdateFeedRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["feed_group_id"] = FeedGroupID,
                ["feed_id"] = FeedID,
            };

            var result = await _client.MakeRequestAsync<UpdateFeedRequest, UpdateFeedResponse>(
                "PUT",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<Response>> MarkActivityAsync(string FeedGroupID, string FeedID,MarkActivityRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["feed_group_id"] = FeedGroupID,
                ["feed_id"] = FeedID,
            };

            var result = await _client.MakeRequestAsync<MarkActivityRequest, Response>(
                "POST",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/activities/mark/batch",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<UnpinActivityResponse>> UnpinActivityAsync(string FeedGroupID, string FeedID, string ActivityID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["feed_group_id"] = FeedGroupID,
                ["feed_id"] = FeedID,
                ["activity_id"] = ActivityID,
            };
            var queryParams = ExtractQueryParams(request);

            var result = await _client.MakeRequestAsync<object, UnpinActivityResponse>(
                "DELETE",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/activities/{activity_id}/pin",queryParams,null,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<PinActivityResponse>> PinActivityAsync(string FeedGroupID, string FeedID, string ActivityID,PinActivityRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["feed_group_id"] = FeedGroupID,
                ["feed_id"] = FeedID,
                ["activity_id"] = ActivityID,
            };

            var result = await _client.MakeRequestAsync<PinActivityRequest, PinActivityResponse>(
                "POST",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/activities/{activity_id}/pin",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<UpdateFeedMembersResponse>> UpdateFeedMembersAsync(string FeedGroupID, string FeedID,UpdateFeedMembersRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["feed_group_id"] = FeedGroupID,
                ["feed_id"] = FeedID,
            };

            var result = await _client.MakeRequestAsync<UpdateFeedMembersRequest, UpdateFeedMembersResponse>(
                "PATCH",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<AcceptFeedMemberInviteResponse>> AcceptFeedMemberInviteAsync(string FeedID, string FeedGroupID,AcceptFeedMemberInviteRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["feed_id"] = FeedID,
                ["feed_group_id"] = FeedGroupID,
            };

            var result = await _client.MakeRequestAsync<AcceptFeedMemberInviteRequest, AcceptFeedMemberInviteResponse>(
                "POST",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members/accept",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<QueryFeedMembersResponse>> QueryFeedMembersAsync(string FeedGroupID, string FeedID,QueryFeedMembersRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["feed_group_id"] = FeedGroupID,
                ["feed_id"] = FeedID,
            };

            var result = await _client.MakeRequestAsync<QueryFeedMembersRequest, QueryFeedMembersResponse>(
                "POST",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members/query",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<RejectFeedMemberInviteResponse>> RejectFeedMemberInviteAsync(string FeedGroupID, string FeedID,RejectFeedMemberInviteRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["feed_group_id"] = FeedGroupID,
                ["feed_id"] = FeedID,
            };

            var result = await _client.MakeRequestAsync<RejectFeedMemberInviteRequest, RejectFeedMemberInviteResponse>(
                "POST",
                "/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members/reject",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<GetFollowSuggestionsResponse>> GetFollowSuggestionsAsync(string FeedGroupID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["feed_group_id"] = FeedGroupID,
            };
            var queryParams = ExtractQueryParams(request);

            var result = await _client.MakeRequestAsync<object, GetFollowSuggestionsResponse>(
                "GET",
                "/api/v2/feeds/feed_groups/{feed_group_id}/follow_suggestions",queryParams,null,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<DeleteFeedGroupResponse>> DeleteFeedGroupAsync(string ID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = ID,
            };
            var queryParams = ExtractQueryParams(request);

            var result = await _client.MakeRequestAsync<object, DeleteFeedGroupResponse>(
                "DELETE",
                "/api/v2/feeds/feed_groups/{id}",queryParams,null,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<GetFeedGroupResponse>> GetFeedGroupAsync(string ID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = ID,
            };

            var result = await _client.MakeRequestAsync<object, GetFeedGroupResponse>(
                "GET",
                "/api/v2/feeds/feed_groups/{id}",null,null,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<GetOrCreateFeedGroupResponse>> GetOrCreateFeedGroupAsync(string ID,GetOrCreateFeedGroupRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = ID,
            };

            var result = await _client.MakeRequestAsync<GetOrCreateFeedGroupRequest, GetOrCreateFeedGroupResponse>(
                "POST",
                "/api/v2/feeds/feed_groups/{id}",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<UpdateFeedGroupResponse>> UpdateFeedGroupAsync(string ID,UpdateFeedGroupRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = ID,
            };

            var result = await _client.MakeRequestAsync<UpdateFeedGroupRequest, UpdateFeedGroupResponse>(
                "PUT",
                "/api/v2/feeds/feed_groups/{id}",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<ListFeedViewsResponse>> ListFeedViewsAsync(object request = null,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<object, ListFeedViewsResponse>(
                "GET",
                "/api/v2/feeds/feed_views",null,null,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<CreateFeedViewResponse>> CreateFeedViewAsync(CreateFeedViewRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<CreateFeedViewRequest, CreateFeedViewResponse>(
                "POST",
                "/api/v2/feeds/feed_views",null,request,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<DeleteFeedViewResponse>> DeleteFeedViewAsync(string ID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = ID,
            };

            var result = await _client.MakeRequestAsync<object, DeleteFeedViewResponse>(
                "DELETE",
                "/api/v2/feeds/feed_views/{id}",null,null,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<GetFeedViewResponse>> GetFeedViewAsync(string ID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = ID,
            };

            var result = await _client.MakeRequestAsync<object, GetFeedViewResponse>(
                "GET",
                "/api/v2/feeds/feed_views/{id}",null,null,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<GetOrCreateFeedViewResponse>> GetOrCreateFeedViewAsync(string ID,GetOrCreateFeedViewRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = ID,
            };

            var result = await _client.MakeRequestAsync<GetOrCreateFeedViewRequest, GetOrCreateFeedViewResponse>(
                "POST",
                "/api/v2/feeds/feed_views/{id}",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<UpdateFeedViewResponse>> UpdateFeedViewAsync(string ID,UpdateFeedViewRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = ID,
            };

            var result = await _client.MakeRequestAsync<UpdateFeedViewRequest, UpdateFeedViewResponse>(
                "PUT",
                "/api/v2/feeds/feed_views/{id}",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<CreateFeedsBatchResponse>> CreateFeedsBatchAsync(CreateFeedsBatchRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<CreateFeedsBatchRequest, CreateFeedsBatchResponse>(
                "POST",
                "/api/v2/feeds/feeds/batch",null,request,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<QueryFeedsResponse>> QueryFeedsAsync(QueryFeedsRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<QueryFeedsRequest, QueryFeedsResponse>(
                "POST",
                "/api/v2/feeds/feeds/query",null,request,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<UpdateFollowResponse>> UpdateFollowAsync(UpdateFollowRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<UpdateFollowRequest, UpdateFollowResponse>(
                "PATCH",
                "/api/v2/feeds/follows",null,request,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<SingleFollowResponse>> FollowAsync(FollowRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<FollowRequest, SingleFollowResponse>(
                "POST",
                "/api/v2/feeds/follows",null,request,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<AcceptFollowResponse>> AcceptFollowAsync(AcceptFollowRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<AcceptFollowRequest, AcceptFollowResponse>(
                "POST",
                "/api/v2/feeds/follows/accept",null,request,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<FollowBatchResponse>> FollowBatchAsync(FollowBatchRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<FollowBatchRequest, FollowBatchResponse>(
                "POST",
                "/api/v2/feeds/follows/batch",null,request,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<QueryFollowsResponse>> QueryFollowsAsync(QueryFollowsRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<QueryFollowsRequest, QueryFollowsResponse>(
                "POST",
                "/api/v2/feeds/follows/query",null,request,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<RejectFollowResponse>> RejectFollowAsync(RejectFollowRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<RejectFollowRequest, RejectFollowResponse>(
                "POST",
                "/api/v2/feeds/follows/reject",null,request,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<UnfollowResponse>> UnfollowAsync(string Source, string Target,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["source"] = Source,
                ["target"] = Target,
            };

            var result = await _client.MakeRequestAsync<object, UnfollowResponse>(
                "DELETE",
                "/api/v2/feeds/follows/{source}/{target}",null,null,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<CreateMembershipLevelResponse>> CreateMembershipLevelAsync(CreateMembershipLevelRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<CreateMembershipLevelRequest, CreateMembershipLevelResponse>(
                "POST",
                "/api/v2/feeds/membership_levels",null,request,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<QueryMembershipLevelsResponse>> QueryMembershipLevelsAsync(QueryMembershipLevelsRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<QueryMembershipLevelsRequest, QueryMembershipLevelsResponse>(
                "POST",
                "/api/v2/feeds/membership_levels/query",null,request,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<Response>> DeleteMembershipLevelAsync(string ID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = ID,
            };

            var result = await _client.MakeRequestAsync<object, Response>(
                "DELETE",
                "/api/v2/feeds/membership_levels/{id}",null,null,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<UpdateMembershipLevelResponse>> UpdateMembershipLevelAsync(string ID,UpdateMembershipLevelRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = ID,
            };

            var result = await _client.MakeRequestAsync<UpdateMembershipLevelRequest, UpdateMembershipLevelResponse>(
                "PATCH",
                "/api/v2/feeds/membership_levels/{id}",null,request,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<UnfollowBatchResponse>> UnfollowBatchAsync(UnfollowBatchRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<UnfollowBatchRequest, UnfollowBatchResponse>(
                "POST",
                "/api/v2/feeds/unfollow/batch",null,request,null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<DeleteFeedUserDataResponse>> DeleteFeedUserDataAsync(string UserID,object request = null,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["user_id"] = UserID,
            };

            var result = await _client.MakeRequestAsync<object, DeleteFeedUserDataResponse>(
                "DELETE",
                "/api/v2/feeds/users/{user_id}/delete",null,null,pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<ExportFeedUserDataResponse>> ExportFeedUserDataAsync(string UserID,ExportFeedUserDataRequest request,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["user_id"] = UserID,
            };

            var result = await _client.MakeRequestAsync<ExportFeedUserDataRequest, ExportFeedUserDataResponse>(
                "POST",
                "/api/v2/feeds/users/{user_id}/export",null,request,pathParams,
                cancellationToken);

            return result;
        }
            }
        }