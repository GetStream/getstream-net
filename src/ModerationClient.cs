// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.
using GetStream.Requests;
using GetStream.Models;

namespace GetStream
{
    public class ModerationClient
    {
        private readonly IClient _client;

        /// <summary>
        /// Create ModerationClient using credentials from environment variables or .env file
        /// </summary>
        public ModerationClient()
        {
            var client = new StreamClient();
            _client = client;
        }
        public ModerationClient(IClient client)
        {
            _client = client ?? throw new ArgumentNullException(nameof(client));
        }
        public ModerationClient(string apiKey, string apiSecret)
        {
            var client = new StreamClient(apiKey, apiSecret);
            _client = client;
        }

        private Dictionary<string, string> ExtractQueryParams(object request)
        {
            if (request == null)
                return new Dictionary<string, string>();
            var queryParams = new Dictionary<string, string>();
            var properties = request.GetType().GetProperties();
            foreach (var prop in properties)
            {
                var value = prop.GetValue(request);
                if (value != null)
                {
                    queryParams[prop.Name.ToLower()] = value.ToString();
                }
            }

            return queryParams;
        }
        public async Task<StreamResponse<BanResponse>> BanAsync(BanRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<BanRequest, BanResponse>(
                "POST",
                "/api/v2/moderation/ban", null, request, null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<BulkImageModerationResponse>> BulkImageModerationAsync(BulkImageModerationRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<BulkImageModerationRequest, BulkImageModerationResponse>(
                "POST",
                "/api/v2/moderation/bulk_image_moderation", null, request, null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<CheckResponse>> CheckAsync(CheckRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<CheckRequest, CheckResponse>(
                "POST",
                "/api/v2/moderation/check", null, request, null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<UpsertConfigResponse>> UpsertConfigAsync(UpsertConfigRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<UpsertConfigRequest, UpsertConfigResponse>(
                "POST",
                "/api/v2/moderation/config", null, request, null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<DeleteModerationConfigResponse>> DeleteConfigAsync(string key,string? team,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["key"] = key,
            };
            var queryParams = new Dictionary<string, string>
            {
                ["team"] = team,
            };

            var result = await _client.MakeRequestAsync<object, DeleteModerationConfigResponse>(
                "DELETE",
                "/api/v2/moderation/config/{key}", queryParams, null, pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<GetConfigResponse>> GetConfigAsync(string key,string? team,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["key"] = key,
            };
            var queryParams = new Dictionary<string, string>
            {
                ["team"] = team,
            };

            var result = await _client.MakeRequestAsync<object, GetConfigResponse>(
                "GET",
                "/api/v2/moderation/config/{key}", queryParams, null, pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<QueryModerationConfigsResponse>> QueryModerationConfigsAsync(QueryModerationConfigsRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<QueryModerationConfigsRequest, QueryModerationConfigsResponse>(
                "POST",
                "/api/v2/moderation/configs", null, request, null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<CustomCheckResponse>> CustomCheckAsync(CustomCheckRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<CustomCheckRequest, CustomCheckResponse>(
                "POST",
                "/api/v2/moderation/custom_check", null, request, null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<DeleteModerationTemplateResponse>> V2DeleteTemplateAsync(
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<object, DeleteModerationTemplateResponse>(
                "DELETE",
                "/api/v2/moderation/feeds_moderation_template", null, null, null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<QueryFeedModerationTemplatesResponse>> V2QueryTemplatesAsync(
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<object, QueryFeedModerationTemplatesResponse>(
                "GET",
                "/api/v2/moderation/feeds_moderation_template", null, null, null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<UpsertModerationTemplateResponse>> V2UpsertTemplateAsync(UpsertModerationTemplateRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<UpsertModerationTemplateRequest, UpsertModerationTemplateResponse>(
                "POST",
                "/api/v2/moderation/feeds_moderation_template", null, request, null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<FlagResponse>> FlagAsync(FlagRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<FlagRequest, FlagResponse>(
                "POST",
                "/api/v2/moderation/flag", null, request, null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<QueryModerationFlagsResponse>> QueryModerationFlagsAsync(QueryModerationFlagsRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<QueryModerationFlagsRequest, QueryModerationFlagsResponse>(
                "POST",
                "/api/v2/moderation/flags", null, request, null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<QueryModerationLogsResponse>> QueryModerationLogsAsync(QueryModerationLogsRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<QueryModerationLogsRequest, QueryModerationLogsResponse>(
                "POST",
                "/api/v2/moderation/logs", null, request, null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<UpsertModerationRuleResponse>> UpsertModerationRuleAsync(UpsertModerationRuleRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<UpsertModerationRuleRequest, UpsertModerationRuleResponse>(
                "POST",
                "/api/v2/moderation/moderation_rule", null, request, null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<DeleteModerationRuleResponse>> DeleteModerationRuleAsync(
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<object, DeleteModerationRuleResponse>(
                "DELETE",
                "/api/v2/moderation/moderation_rule/{id}", null, null, null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<GetModerationRuleResponse>> GetModerationRuleAsync(
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<object, GetModerationRuleResponse>(
                "GET",
                "/api/v2/moderation/moderation_rule/{id}", null, null, null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<QueryModerationRulesResponse>> QueryModerationRulesAsync(QueryModerationRulesRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<QueryModerationRulesRequest, QueryModerationRulesResponse>(
                "POST",
                "/api/v2/moderation/moderation_rules", null, request, null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<MuteResponse>> MuteAsync(MuteRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<MuteRequest, MuteResponse>(
                "POST",
                "/api/v2/moderation/mute", null, request, null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<QueryReviewQueueResponse>> QueryReviewQueueAsync(QueryReviewQueueRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<QueryReviewQueueRequest, QueryReviewQueueResponse>(
                "POST",
                "/api/v2/moderation/review_queue", null, request, null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<GetReviewQueueItemResponse>> GetReviewQueueItemAsync(string id,
            CancellationToken cancellationToken = default)
        {
            var pathParams = new Dictionary<string, string>
            {
                ["id"] = id,
            };

            var result = await _client.MakeRequestAsync<object, GetReviewQueueItemResponse>(
                "GET",
                "/api/v2/moderation/review_queue/{id}", null, null, pathParams,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<SubmitActionResponse>> SubmitActionAsync(SubmitActionRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<SubmitActionRequest, SubmitActionResponse>(
                "POST",
                "/api/v2/moderation/submit_action", null, request, null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<UnbanResponse>> UnbanAsync(string targetUserID, string? channelCid, string? createdBy,UnbanRequest request,
            CancellationToken cancellationToken = default)
        {
            var queryParams = new Dictionary<string, string>
            {
                ["target_user_id"] = targetUserID,
                ["channel_cid"] = channelCid,
                ["created_by"] = createdBy,
            };

            var result = await _client.MakeRequestAsync<UnbanRequest, UnbanResponse>(
                "POST",
                "/api/v2/moderation/unban", queryParams, request, null,
                cancellationToken);

            return result;
        }
        public async Task<StreamResponse<UnmuteResponse>> UnmuteAsync(UnmuteRequest request,
            CancellationToken cancellationToken = default)
        {

            var result = await _client.MakeRequestAsync<UnmuteRequest, UnmuteResponse>(
                "POST",
                "/api/v2/moderation/unmute", null, request, null,
                cancellationToken);

            return result;
        }
            }
        }