// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.
using System;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using GetStream.Requests;
using GetStream.Models;

namespace GetStream
{
    public class Feed(FeedsV3Client client, string feedGroup, string feedId)
    {
        private readonly FeedsV3Client _client = client ?? throw new ArgumentNullException(nameof(client));
        private readonly string _feedGroup = feedGroup ?? throw new ArgumentNullException(nameof(feedGroup));
        private readonly string _feedId = feedId ?? throw new ArgumentNullException(nameof(feedId));
        
// Delete a single feed by its ID
public async Task<StreamResponse<DeleteFeedResponse>> DeleteFeedAsync(
    object request = null,
    CancellationToken cancellationToken = default)
{
    return await _client.DeleteFeedAsync(_feedGroup, _feedId,
    request, cancellationToken);
}
        
// Create a single feed for a given feed group
public async Task<StreamResponse<GetOrCreateFeedResponse>> GetOrCreateFeedAsync(
    GetOrCreateFeedRequest request,
    CancellationToken cancellationToken = default)
{
    return await _client.GetOrCreateFeedAsync(_feedGroup, _feedId,
    request, cancellationToken);
}
        
// Update an existing feed
public async Task<StreamResponse<UpdateFeedResponse>> UpdateFeedAsync(
    UpdateFeedRequest request,
    CancellationToken cancellationToken = default)
{
    return await _client.UpdateFeedAsync(_feedGroup, _feedId,
    request, cancellationToken);
}
        
// Mark activities as read/seen/watched. Can mark by timestamp (seen), activity IDs (read), or all as read.
public async Task<StreamResponse<Response>> MarkActivityAsync(
    MarkActivityRequest request,
    CancellationToken cancellationToken = default)
{
    return await _client.MarkActivityAsync(_feedGroup, _feedId,
    request, cancellationToken);
}
        
// Unpin an activity from a feed. This removes the pin, so the activity will no longer be displayed at the top of the feed.
public async Task<StreamResponse<UnpinActivityResponse>> UnpinActivityAsync(string ActivityID,
    object request = null,
    CancellationToken cancellationToken = default)
{
    return await _client.UnpinActivityAsync(_feedGroup, _feedId,
    ActivityID,request, cancellationToken);
}
        
// Pin an activity to a feed. Pinned activities are typically displayed at the top of a feed.
public async Task<StreamResponse<PinActivityResponse>> PinActivityAsync(string ActivityID,
    PinActivityRequest request,
    CancellationToken cancellationToken = default)
{
    return await _client.PinActivityAsync(_feedGroup, _feedId,
    ActivityID,request, cancellationToken);
}
        
// Add, remove, or set members for a feed
public async Task<StreamResponse<UpdateFeedMembersResponse>> UpdateFeedMembersAsync(
    UpdateFeedMembersRequest request,
    CancellationToken cancellationToken = default)
{
    return await _client.UpdateFeedMembersAsync(_feedGroup, _feedId,
    request, cancellationToken);
}
        
// Accepts a pending feed member request
public async Task<StreamResponse<AcceptFeedMemberInviteResponse>> AcceptFeedMemberInviteAsync(
    AcceptFeedMemberInviteRequest request,
    CancellationToken cancellationToken = default)
{
    return await _client.AcceptFeedMemberInviteAsync(_feedGroup, _feedId,
    request, cancellationToken);
}
        
// Query feed members based on filters with pagination and sorting options
public async Task<StreamResponse<QueryFeedMembersResponse>> QueryFeedMembersAsync(
    QueryFeedMembersRequest request,
    CancellationToken cancellationToken = default)
{
    return await _client.QueryFeedMembersAsync(_feedGroup, _feedId,
    request, cancellationToken);
}
        
// Rejects a pending feed member request
public async Task<StreamResponse<RejectFeedMemberInviteResponse>> RejectFeedMemberInviteAsync(
    RejectFeedMemberInviteRequest request,
    CancellationToken cancellationToken = default)
{
    return await _client.RejectFeedMemberInviteAsync(_feedGroup, _feedId,
    request, cancellationToken);
}
    }
}