// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.
using System;
using System.Threading.Tasks;
using Xunit;
using Moq;

namespace GetStream.Tests
{
    public class FeedClientTests
    {
        private readonly Mock<Client> _mockClient;
        private readonly FeedClient _client;

        public FeedClientTests()
        {
            _mockClient = new Mock<Client>();
            _client = new FeedClient(_mockClient.Object);
        }
[Fact]
        public async Task AddActivityAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new AddActivityRequest();

            // Act
            await _client.AddActivityAsync(request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task UpsertActivitiesAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpsertActivitiesRequest();

            // Act
            await _client.UpsertActivitiesAsync(request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task DeleteActivitiesAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new DeleteActivitiesRequest();

            // Act
            await _client.DeleteActivitiesAsync(request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task QueryActivitiesAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new QueryActivitiesRequest();

            // Act
            await _client.QueryActivitiesAsync(request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task DeleteActivityAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new DeleteActivityRequest();
            var ActivityID = "test-ActivityID";

            // Act
            await _client.DeleteActivityAsync(ActivityID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task GetActivityAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new GetActivityRequest();
            var ActivityID = "test-ActivityID";

            // Act
            await _client.GetActivityAsync(ActivityID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task UpdateActivityPartialAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateActivityPartialRequest();
            var ActivityID = "test-ActivityID";

            // Act
            await _client.UpdateActivityPartialAsync(ActivityID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task UpdateActivityAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateActivityRequest();
            var ActivityID = "test-ActivityID";

            // Act
            await _client.UpdateActivityAsync(ActivityID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task DeleteBookmarkAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new DeleteBookmarkRequest();
            var ActivityID = "test-ActivityID";

            // Act
            await _client.DeleteBookmarkAsync(ActivityID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task UpdateBookmarkAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateBookmarkRequest();
            var ActivityID = "test-ActivityID";

            // Act
            await _client.UpdateBookmarkAsync(ActivityID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task AddBookmarkAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new AddBookmarkRequest();
            var ActivityID = "test-ActivityID";

            // Act
            await _client.AddBookmarkAsync(ActivityID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task CastPollVoteAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new CastPollVoteRequest();
            var ActivityID = "test-ActivityID";
            var PollID = "test-PollID";

            // Act
            await _client.CastPollVoteAsync(ActivityID, PollID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task DeletePollVoteAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new DeletePollVoteRequest();
            var ActivityID = "test-ActivityID";
            var PollID = "test-PollID";
            var VoteID = "test-VoteID";

            // Act
            await _client.DeletePollVoteAsync(ActivityID, PollID, VoteID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task AddReactionAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new AddReactionRequest();
            var ActivityID = "test-ActivityID";

            // Act
            await _client.AddReactionAsync(ActivityID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task QueryActivityReactionsAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new QueryActivityReactionsRequest();
            var ActivityID = "test-ActivityID";

            // Act
            await _client.QueryActivityReactionsAsync(ActivityID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task DeleteActivityReactionAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new DeleteActivityReactionRequest();
            var ActivityID = "test-ActivityID";
            var Type = "test-Type";

            // Act
            await _client.DeleteActivityReactionAsync(ActivityID, Type, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task QueryBookmarkFoldersAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new QueryBookmarkFoldersRequest();

            // Act
            await _client.QueryBookmarkFoldersAsync(request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task DeleteBookmarkFolderAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new DeleteBookmarkFolderRequest();
            var FolderID = "test-FolderID";

            // Act
            await _client.DeleteBookmarkFolderAsync(FolderID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task UpdateBookmarkFolderAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateBookmarkFolderRequest();
            var FolderID = "test-FolderID";

            // Act
            await _client.UpdateBookmarkFolderAsync(FolderID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task QueryBookmarksAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new QueryBookmarksRequest();

            // Act
            await _client.QueryBookmarksAsync(request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task GetCommentsAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new GetCommentsRequest();

            // Act
            await _client.GetCommentsAsync(request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task AddCommentAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new AddCommentRequest();

            // Act
            await _client.AddCommentAsync(request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task AddCommentsBatchAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new AddCommentsBatchRequest();

            // Act
            await _client.AddCommentsBatchAsync(request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task QueryCommentsAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new QueryCommentsRequest();

            // Act
            await _client.QueryCommentsAsync(request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task DeleteCommentAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new DeleteCommentRequest();
            var CommentID = "test-CommentID";

            // Act
            await _client.DeleteCommentAsync(CommentID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task GetCommentAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new GetCommentRequest();
            var CommentID = "test-CommentID";

            // Act
            await _client.GetCommentAsync(CommentID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task UpdateCommentAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateCommentRequest();
            var CommentID = "test-CommentID";

            // Act
            await _client.UpdateCommentAsync(CommentID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task AddCommentReactionAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new AddCommentReactionRequest();
            var CommentID = "test-CommentID";

            // Act
            await _client.AddCommentReactionAsync(CommentID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task QueryCommentReactionsAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new QueryCommentReactionsRequest();
            var CommentID = "test-CommentID";

            // Act
            await _client.QueryCommentReactionsAsync(CommentID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task DeleteCommentReactionAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new DeleteCommentReactionRequest();
            var CommentID = "test-CommentID";
            var Type = "test-Type";

            // Act
            await _client.DeleteCommentReactionAsync(CommentID, Type, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task GetCommentRepliesAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new GetCommentRepliesRequest();
            var CommentID = "test-CommentID";

            // Act
            await _client.GetCommentRepliesAsync(CommentID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task ListFeedGroupsAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new ListFeedGroupsRequest();

            // Act
            await _client.ListFeedGroupsAsync(request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task CreateFeedGroupAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new CreateFeedGroupRequest();

            // Act
            await _client.CreateFeedGroupAsync(request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task DeleteFeedGroupAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new DeleteFeedGroupRequest();
            var FeedGroupID = "test-FeedGroupID";

            // Act
            await _client.DeleteFeedGroupAsync(FeedGroupID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task GetFeedGroupAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new GetFeedGroupRequest();
            var FeedGroupID = "test-FeedGroupID";

            // Act
            await _client.GetFeedGroupAsync(FeedGroupID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task UpdateFeedGroupAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateFeedGroupRequest();
            var FeedGroupID = "test-FeedGroupID";

            // Act
            await _client.UpdateFeedGroupAsync(FeedGroupID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task DeleteFeedAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new DeleteFeedRequest();
            var FeedGroupID = "test-FeedGroupID";
            var FeedID = "test-FeedID";

            // Act
            await _client.DeleteFeedAsync(FeedGroupID, FeedID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task GetOrCreateFeedAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new GetOrCreateFeedRequest();
            var FeedGroupID = "test-FeedGroupID";
            var FeedID = "test-FeedID";

            // Act
            await _client.GetOrCreateFeedAsync(FeedGroupID, FeedID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task UpdateFeedAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateFeedRequest();
            var FeedGroupID = "test-FeedGroupID";
            var FeedID = "test-FeedID";

            // Act
            await _client.UpdateFeedAsync(FeedGroupID, FeedID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task MarkActivityAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new MarkActivityRequest();
            var FeedGroupID = "test-FeedGroupID";
            var FeedID = "test-FeedID";

            // Act
            await _client.MarkActivityAsync(FeedGroupID, FeedID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task UnpinActivityAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UnpinActivityRequest();
            var FeedGroupID = "test-FeedGroupID";
            var FeedID = "test-FeedID";
            var ActivityID = "test-ActivityID";

            // Act
            await _client.UnpinActivityAsync(FeedGroupID, FeedID, ActivityID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task PinActivityAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new PinActivityRequest();
            var FeedGroupID = "test-FeedGroupID";
            var FeedID = "test-FeedID";
            var ActivityID = "test-ActivityID";

            // Act
            await _client.PinActivityAsync(FeedGroupID, FeedID, ActivityID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task UpdateFeedMembersAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateFeedMembersRequest();
            var FeedGroupID = "test-FeedGroupID";
            var FeedID = "test-FeedID";

            // Act
            await _client.UpdateFeedMembersAsync(FeedGroupID, FeedID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task AcceptFeedMemberInviteAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new AcceptFeedMemberInviteRequest();
            var FeedID = "test-FeedID";
            var FeedGroupID = "test-FeedGroupID";

            // Act
            await _client.AcceptFeedMemberInviteAsync(FeedID, FeedGroupID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task QueryFeedMembersAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new QueryFeedMembersRequest();
            var FeedGroupID = "test-FeedGroupID";
            var FeedID = "test-FeedID";

            // Act
            await _client.QueryFeedMembersAsync(FeedGroupID, FeedID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task RejectFeedMemberInviteAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new RejectFeedMemberInviteRequest();
            var FeedGroupID = "test-FeedGroupID";
            var FeedID = "test-FeedID";

            // Act
            await _client.RejectFeedMemberInviteAsync(FeedGroupID, FeedID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task GetFollowSuggestionsAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new GetFollowSuggestionsRequest();
            var FeedGroupID = "test-FeedGroupID";

            // Act
            await _client.GetFollowSuggestionsAsync(FeedGroupID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task ListFeedViewsAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new ListFeedViewsRequest();

            // Act
            await _client.ListFeedViewsAsync(request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task CreateFeedViewAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new CreateFeedViewRequest();

            // Act
            await _client.CreateFeedViewAsync(request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task DeleteFeedViewAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new DeleteFeedViewRequest();
            var ViewID = "test-ViewID";

            // Act
            await _client.DeleteFeedViewAsync(ViewID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task GetFeedViewAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new GetFeedViewRequest();
            var ViewID = "test-ViewID";

            // Act
            await _client.GetFeedViewAsync(ViewID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task UpdateFeedViewAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateFeedViewRequest();
            var ViewID = "test-ViewID";

            // Act
            await _client.UpdateFeedViewAsync(ViewID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task CreateFeedsBatchAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new CreateFeedsBatchRequest();

            // Act
            await _client.CreateFeedsBatchAsync(request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task FeedsQueryFeedsAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new FeedsQueryFeedsRequest();

            // Act
            await _client.FeedsQueryFeedsAsync(request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task UpdateFollowAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UpdateFollowRequest();

            // Act
            await _client.UpdateFollowAsync(request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task FollowAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new FollowRequest();

            // Act
            await _client.FollowAsync(request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task AcceptFollowAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new AcceptFollowRequest();

            // Act
            await _client.AcceptFollowAsync(request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task FollowBatchAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new FollowBatchRequest();

            // Act
            await _client.FollowBatchAsync(request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task QueryFollowsAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new QueryFollowsRequest();

            // Act
            await _client.QueryFollowsAsync(request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task RejectFollowAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new RejectFollowRequest();

            // Act
            await _client.RejectFollowAsync(request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task UnfollowAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UnfollowRequest();
            var Source = "test-Source";
            var Target = "test-Target";

            // Act
            await _client.UnfollowAsync(Source, Target, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task UnfollowBatchAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new UnfollowBatchRequest();

            // Act
            await _client.UnfollowBatchAsync(request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task DeleteFeedUserDataAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new DeleteFeedUserDataRequest();
            var UserID = "test-UserID";

            // Act
            await _client.DeleteFeedUserDataAsync(UserID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
[Fact]
        public async Task ExportFeedUserDataAsync_ShouldCallCorrectEndpoint()
        {
            // Arrange
            var request = new ExportFeedUserDataRequest();
            var UserID = "test-UserID";

            // Act
            await _client.ExportFeedUserDataAsync(UserID, request);

            // Assert
            // TODO: Add assertions based on the expected behavior
        }
    }
}